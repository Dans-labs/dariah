import { combineReducers, createStore, applyMiddleware } from 'redux'
import thunkMiddleware from 'redux-thunk'
import { reducer as form } from 'redux-form'

import win from 'win'
import notify from 'notify'
import docs from 'docs'
import tables from 'tables'
import me from 'me'
import filters from 'filters'
import alter from 'alter'
import select from 'select'

/* ACTIONS */

/* global process */
/* global require */

/* actions to ignore in logging and in the redux dev tool
 * Mainly used for actions generated by third party libraries, such as redux-form
 */

const predicate = (state, action) => !action.type.startsWith('@@redux-form')

//const predicate = () => true // if you want to see all actions

const configureStore = reducer => {
  let store
  if (process.env.NODE_ENV === `development`) {
    const { createLogger } = require(`redux-logger`)
    const { composeWithDevTools } = require('redux-devtools-extension')
    const composeEnhancers = composeWithDevTools({ predicate })
    store = createStore(
      reducer,
      composeEnhancers(
        applyMiddleware(
          thunkMiddleware,
          createLogger({ predicate }),
        )
      )
    )
  }
  else {
    store = createStore(
      reducer,
      applyMiddleware(
        thunkMiddleware,
      )
    )
  }
  return store
}

/* REDUCER */

export default configureStore(combineReducers({
  win,
  notify,
  docs,
  tables,
  me,
  filters,
  alter,
  form,
  select,
}))

/* SELECTORS */

/*
export const combineSelectors = function(...selectors) {
  return (state, props) => {
    const result = {}
    for (const selector of selectors) {
      Object.assign(result, selector(state, props))
    }
    return result
  }
}
*/

/* HELPERS */

