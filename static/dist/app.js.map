{"version":3,"file":"app.js","sources":["webpack:///src/js/app/dux/alter.js","webpack:///src/js/app/dux/docs.js","webpack:///src/js/app/dux/filters.js","webpack:///src/js/app/dux/me.js","webpack:///src/js/app/dux/notify.js","webpack:///src/js/app/dux/roots.js","webpack:///src/js/app/dux/select.js","webpack:///src/js/app/dux/tables.js","webpack:///src/js/app/dux/win.js","webpack:///src/js/app/main.jsx","webpack:///src/js/app/object/CheckboxI.jsx","webpack:///src/js/app/object/DocMd.jsx","webpack:///src/js/app/object/EUMap.jsx","webpack:///src/js/app/object/FilterCompute.jsx","webpack:///src/js/app/object/ItemFiltered.jsx","webpack:///src/js/app/object/ItemRecord.jsx","webpack:///src/js/app/object/Items.jsx","webpack:///src/js/app/object/Login.jsx","webpack:///src/js/app/object/Notification.jsx","webpack:///src/js/app/object/Window.jsx","webpack:///src/js/app/pure/Doc.jsx","webpack:///src/js/app/pure/DocHtml.jsx","webpack:///src/js/app/pure/DocPdf.jsx","webpack:///src/js/app/pure/Input.jsx","webpack:///src/js/app/pure/InputMulti.jsx","webpack:///src/js/app/pure/ItemHead.jsx","webpack:///src/js/app/pure/MarkdownArea.jsx","webpack:///src/js/app/pure/NavLink.jsx","webpack:///src/js/app/pure/NotFound.jsx","webpack:///src/js/app/pure/Root.jsx","webpack:///src/js/app/pure/Stat.jsx","webpack:///src/js/app/pure/Static.jsx","webpack:///src/js/app/state/Alternative.jsx","webpack:///src/js/app/state/App.jsx","webpack:///src/js/app/state/Backoffice.jsx","webpack:///src/js/app/state/ByValue.jsx","webpack:///src/js/app/state/Facet.jsx","webpack:///src/js/app/state/FieldEdit.jsx","webpack:///src/js/app/state/FieldRead.jsx","webpack:///src/js/app/state/Filter.jsx","webpack:///src/js/app/state/Fulltext.jsx","webpack:///src/js/app/state/ItemForm.jsx","webpack:///src/js/app/state/ItemList.jsx","webpack:///src/js/app/state/Pane.jsx","webpack:///src/js/app/state/RelSelect.jsx","webpack:///src/js/app/state/SubApp.jsx"],"sourcesContent":["import merge from 'lodash/merge'\nimport { makeReducer } from 'utils'\n\n/* ACTIONS */\n\nexport const nextAlt = (tag, nAlts, initial) => ({ type: 'nextAlt', tag, nAlts, initial })\n\n/* REDUCER */\n\nconst flows = {\n  nextAlt(state, { tag, initial, nAlts }) {\n    const { [tag]: oldAlt = (initial || 0) } = state\n    const newAlt = (oldAlt + 1) % nAlts\n    return merge({}, state, { [tag]: newAlt })\n  },\n}\n\nexport default makeReducer(flows)\n\n/* SELECTORS */\n\nexport const getAlt = ({ alter }, { tag, initial }) => {\n  const { [tag]: alt = initial || 0 } = alter\n  return { alt }\n}\n\n/* HELPERS */\n\n\n\n\n// WEBPACK FOOTER //\n// src/js/app/dux/alter.js","import merge from 'lodash/merge'\n\nimport { accessData } from 'server'\nimport { propsChanged, makeReducer } from 'utils'\n\n/* ACTIONS */\n/*\n * Most actions call accessData, which will dispatch the ultimate fetch action.\n */\n\nexport const fetchDoc = props => {\n  const { docDir, docName, docExt } = props\n  const path = `${docDir}/${docName}.${docExt}`\n  return accessData({ type: 'fetchDoc', contentType: 'json', path, desc: `document ${docName}` })\n}\n\n/* REDUCER */\n\nconst flows = {\n  fetchDoc(state, { path, data }) {\n    if (data == null) {return state}\n    return merge({}, state, { [path]: data })\n  },\n}\n\nexport default makeReducer(flows)\n\n/* SELECTORS */\n\nexport const getDoc = ({ docs }, { docDir, docName, docExt }) => ({\n  text: docs[`${docDir}/${docName}.${docExt}`],\n})\n\n/* HELPERS */\n\nexport const needDoc = props => (props.text == null)\n\nexport const changedDoc = (newProps, oldProps) => (\n  propsChanged(newProps, needDoc, oldProps, ['docDir', 'docName', 'docExt'])\n)\n\n\n\n\n// WEBPACK FOOTER //\n// src/js/app/dux/docs.js","import merge from 'lodash/merge'\nimport { createSelectorCreator, defaultMemoize } from 'reselect'\n\nimport { makeReducer } from 'utils'\nimport { levelOneEq } from 'memo'\nimport { repRelated } from 'tables'\n\n/* ACTIONS */\n\nexport const changeFulltext = (table, filterId, searchString) => ({ type: 'fulltext', table, filterId, data: searchString })\nexport const changeFacet = (table, filterId, valueId, onOff) => ({ type: 'facet', table, filterId, data: [valueId, onOff] })\nexport const changeFacetAll = (table, filterId, onOff) => ({ type: 'facetAll', table, filterId, data: onOff })\n\nexport const setupFiltering = (tables, table) => dispatch => {\n  const filterSettings = getFiltersInitialized({ tables }, { table })\n  dispatch({ type: 'setupFiltering', table, filterSettings })\n}\n\n/* REDUCER */\n\nconst flows = {\n  setupFiltering(state, { table, filterSettings }) {\n    return merge({}, state, { [table]: { filterSettings, initialized: true } })\n  },\n  fulltext(state, { table, filterId, data }) {\n    return merge({}, state, { [table]: { filterSettings: { [filterId]: data } } })\n  },\n  facetAll(state, { table, filterId, data }) {\n    const { [table]: { filterSettings: { [filterId]: facets } } } = state\n    const sameSettings = {}\n    Object.keys(facets).forEach(valueId => {sameSettings[valueId] = data})\n    return merge({}, state, { [table]: { filterSettings: { [filterId]: sameSettings } } })\n  },\n  facet(state, { table, filterId, data }) {\n    const [valueId, filterSetting] = data\n    return merge({}, state, { [table]: { filterSettings: { [filterId]: { [valueId]: filterSetting } } } })\n  },\n}\n\nexport default makeReducer(flows)\n\n/* SELECTORS */\n\n/* selector creator */\n\nconst createLevelOneSelector = createSelectorCreator(\n  defaultMemoize,\n  levelOneEq,\n)\n\n/* basic selectors */\n\nconst getFilterData = ({ tables }, { table }) => {\n  const { [table]: { valueLists, fields, filterList, fieldSpecs } } = tables\n  const selection = { valueLists, fields, filterList, fieldSpecs }\n  for (const field of Object.keys(valueLists)) {\n    const { [field]: { valType: { values: relTable } } } = fieldSpecs\n    const { [relTable]: relTableData } = tables\n    selection[relTable] = relTableData\n  }\n  return selection\n}\n\n/* selector computers */\n\nconst compileFiltering = ({ valueLists, fields, filterList, fieldSpecs, ...relTables }) => {\n  const presentFilterList = filterList.filter(x => fields[x.field])\n  const filterFields = presentFilterList.filter(x => x.type !== 'Fulltext').map(x => x.field)\n  const fieldValues = {}\n  for (const field of filterFields) {\n    const { [field]: { valType } } = fieldSpecs\n    const { [field]: vals } = valueLists\n    const fFieldValues = {'': '-none-'}\n    if (typeof valType == 'string') {\n      vals.forEach((v, i) => {fFieldValues[i] = v})\n    }\n    else {\n      const { values: relTable } = valType\n      vals.forEach(v => {\n        fFieldValues[v] = repRelated(relTables, relTable, v)\n      })\n    }\n    fieldValues[field] = fFieldValues\n  }\n  return fieldValues\n}\n\nconst initFiltering = ({ fields, filterList }, fieldValues) => {\n  const presentFilterList = filterList.filter(x => fields[x.field])\n  const filterSettings = {}\n  presentFilterList.forEach((filterSpec, filterId) => {\n    if (filterSpec.type == 'Fulltext') {\n      filterSettings[filterId] = ''\n    }\n    else {\n      const facets = {}\n      Object.keys(fieldValues[filterSpec.field]).forEach(valueId => {facets[valueId] = true})\n      filterSettings[filterId] = facets\n    }\n  })\n  return filterSettings\n}\n\nconst computeFiltering = (tables, table, fieldValues, filterSettings) => {\n  const { [table]: { entities, order, fields, fieldSpecs, filterList } } = tables\n  const presentFilterList = filterList.filter(x => fields[x.field])\n  const filterChecks = {}\n  const otherFilteredData = {}\n\n  const makeFilterCheck = (filterSpec, filterId) => {\n    const { field } = filterSpec\n    const { [filterId]: filterSetting } = filterSettings\n    const { [field]: fieldSpec } = fieldSpecs\n    return (\n      filterSpec.type === 'Fulltext' ?\n          fulltextCheck :\n          facetCheck\n      )(tables, field, fieldSpec, filterSetting)\n  }\n\n  presentFilterList.forEach((filterSpec, filterId) => {\n    filterChecks[filterId] = makeFilterCheck(filterSpec, filterId)\n    otherFilteredData[filterId] = []\n  })\n  const filteredData = []\n\n  for (const eId of order) {\n    const { [eId]: entity } = entities\n    let theOneFail = null\n    let v = true\n    let discard = false\n    Object.entries(filterChecks).forEach(([filterId, filterCheck]) => {\n      if (!discard) {\n        const pass = filterCheck(entity)\n        if (!pass) {\n          v = false\n          if (theOneFail === null) {theOneFail = filterId}\n          else {discard = true}\n        }\n      }\n    })\n    if (!discard) {\n      const { values: { _id } } = entity\n      if (v) {\n        filteredData.push(_id)\n        presentFilterList.forEach((filterSpec, filterId) => {\n          otherFilteredData[filterId].push(_id)\n        })\n      }\n      else {otherFilteredData[theOneFail].push(_id)}\n    }\n  }\n  const amounts = {}\n  presentFilterList.forEach(({ field, type }, filterId) => {\n    const { [field]: fieldSpec } = fieldSpecs\n    amounts[filterId] = type === 'Fulltext' ? null : countFacets(\n      tables, field, fieldSpec, fieldValues[field], otherFilteredData[filterId], entities\n    )\n  })\n  const filteredAmountOthers = {}\n  Object.entries(otherFilteredData).forEach(([filterId, x]) => {\n    filteredAmountOthers[filterId] = x.length\n  })\n  return {\n    filteredData,\n    filteredAmountOthers,\n    amounts,\n  }\n}\n\n/* selectors for export */\n\nconst getFiltersCompiled = createLevelOneSelector(\n  getFilterData,\n  compileFiltering,\n)\n\nexport const getFieldValues = ({ tables }, { table, filterField }) => ({\n  fieldValues: getFiltersCompiled({ tables }, { table })[filterField],\n})\n\nconst getFiltersInitialized = createLevelOneSelector(\n  getFilterData,\n  getFiltersCompiled,\n  initFiltering,\n)\n\nexport const getFilterSetting = ({ filters }, { table, filterId }) => ({\n  filterSetting: filters[table].filterSettings[filterId],\n})\n\nexport const getFiltersApplied = ({ tables, filters }, { table }) => {\n  const { [table]: filterStatus = { filterSettings: {}, initialized: false } } = filters\n  const { filterSettings, initialized } = filterStatus\n  const fieldValues = getFiltersCompiled({ tables }, { table })\n  if (initialized) {\n    return {\n      tables,\n      initialized,\n      fieldValues,\n      filterSettings,\n      ...computeFiltering(tables, table, fieldValues, filterSettings),\n    }\n  }\n  else {\n    return {\n      tables,\n      initialized,\n      fieldValues,\n    }\n  }\n}\n\n/* HELPERS */\n\nconst getUnpack = (tables, fieldSpec, asString = false) => {\n  const { valType, multiple } = fieldSpec\n  let unpack\n  if (typeof valType == 'string') {\n    unpack = multiple ? (\n      asString ? (\n        v => (v == null) ? '' : v.join(' ')\n      ) : (\n        v => (v == null) ? [] : v\n      )\n    ) : (\n      asString ? (\n        v => (v == null) ? '' : v\n      ) : (\n        v => (v == null) ? [] : [v]\n      )\n    )\n  }\n  else {\n    const { values: relTable } = valType\n    unpack = multiple ? (\n      asString ? (\n        v => (v == null) ? '' : v.map(v => repRelated(tables, relTable, v).join(' '))\n      ) : (\n        v => (v == null) ? [] : v\n      )\n    ) : (\n      asString ? (\n        v => (v == null) ? '' : repRelated(tables, relTable, v)\n      ) : (\n        v => (v == null) ? [] : [v]\n      )\n    )\n  }\n  return unpack\n}\n\nconst fulltextCheck = (tables, field, fieldSpec, term) => {\n  const unpack = getUnpack(tables, fieldSpec, true)\n  const search = term.toLowerCase()\n  if (search == null || search == '') {\n    return () => true\n  }\n  return entity => {\n    const { values: { [field]: val } } = entity\n    const rep = unpack(val)\n    return rep != null && rep.toLowerCase().indexOf(search) !== -1\n  }\n}\n\nconst facetCheck = (tables, field, fieldSpec, facetSettings) => {\n  const unpack = getUnpack(tables, fieldSpec)\n  if (facetSettings.size === 0) {\n    return () => false\n  }\n  return entity => {\n    const { values: { [field]: val } } = entity\n    const rep = unpack(val)\n    if (rep.length == 0) {\n      return facetSettings['']\n    }\n    for (const r of rep) {\n      if (facetSettings[r]) {\n        return true\n      }\n    }\n    return false\n  }\n}\n\nconst countFacets = (tables, field, fieldSpec, fieldValues, filteredData, entities) => {\n  const unpack = getUnpack(tables, fieldSpec)\n  const facetAmounts = {}\n  Object.keys(fieldValues).forEach(r => {facetAmounts[r] = 0})\n  for (const eId of filteredData) {\n    const { [eId]: { values: { [field]: val } } } = entities\n    const rep = unpack(val)\n    if (rep.length == 0) {\n      facetAmounts[''] += 1\n    }\n    else {\n      for (const r of rep) {\n        facetAmounts[r] += 1\n      }\n    }\n  }\n  return facetAmounts\n}\n\nconst INTL = new Intl.Collator('en', { sensitivity: 'base' })\nconst sortEntries = (x, y) => INTL.compare(x[1], y[1])\n\nexport const placeFacets = (fieldValues, maxCols) => {\n  if (fieldValues == null) {return []}\n  const facets = Object.entries(fieldValues).sort(sortEntries)\n  if (facets.length == 0) {return []}\n  const rows = []\n  const { length: lf } = facets\n  const nrows = Math.floor(lf / maxCols) + ((lf % maxCols) ? 1 : 0)\n  const ncols = Math.floor(lf / nrows) + ((lf % nrows) ? 1 : 0)\n  for (let r = 0; r < nrows; r++) {\n    const row = []\n    for (let c = 0; c < ncols; c++) {\n      const f = nrows * c + r\n      row.push((f < lf) ? facets[f] : null)\n    }\n    rows.push(row)\n  }\n  return rows\n}\n\nexport const testAllChecks = filterSettings => {\n  let allTrue = true\n  let allFalse = true\n  for (const valueEntry of Object.entries(filterSettings)) {\n    if (valueEntry[1]) {allFalse = false}\n    else {allTrue = false}\n  }\n  return { allTrue, allFalse }\n}\n\n\n\n\n// WEBPACK FOOTER //\n// src/js/app/dux/filters.js","import { accessData } from 'server'\nimport { makeReducer } from 'utils'\n\n/* ACTIONS */\n/*\n * Most actions call accessData, which will dispatch the ultimate fetch action.\n */\nexport const fetchMe = () => (\n  accessData({ type: 'fetchMe', contentType: 'db', path: '/who/ami', desc: 'me' })\n)\n\n/* REDUCER */\n\nconst flows = {\n  fetchMe(state, { data }) {\n    if (data == null) {return {}}\n    return { ...data }\n  },\n}\n\nexport default makeReducer(flows)\n\n/* SELECTORS */\n\nexport const getMe = ({ me }) => ({ me })\n\n/* HELPERS */\n\n\n\n\n// WEBPACK FOOTER //\n// src/js/app/dux/me.js","import mergeWith from 'lodash/mergewith'\nimport { makeReducer } from 'utils'\n\n/* ACTIONS */\n\nexport const notify = msgs => ({ type: 'msgs', msgs })\nexport const clear = () => ({ type: 'clear' })\nexport const display = onOff => ({ type: 'display', onOff })\n\n/* REDUCER */\n\nconst subFlows = {\n  pending(state, { desc, busy, extraMsgs }) {\n    return mergeWith({}, state, {\n      items: [\n        ...extraMsgs,\n        { kind: 'special', text: `waiting for ${desc}`},\n      ],\n      busy: busy + 1,\n    }, addItems)\n  },\n  success(state, { desc, busy, extraMsgs }) {\n    return mergeWith({}, state, {\n      items: [\n        ...extraMsgs,\n        { kind: 'info', text: `${desc} ok` },\n      ],\n      busy: busy - 1,\n    }, addItems)\n  },\n  error(state, { desc, busy, extraMsgs }) {\n    return mergeWith({}, state, {\n      items: [\n        ...extraMsgs,\n        { kind: 'error', text: `${desc} failed` },\n      ],\n      busy: busy - 1,\n      show: true,\n    }, addItems)\n  },\n}\n\nconst flows = {\n  async(state, { msgs, status, desc }) {\n    const { busy } = state\n    const extraMsgs = msgs || []\n    const { [status]: subFlow } = subFlows\n    return subFlow ? subFlow(state, { extraMsgs, desc, busy }) : state\n  },\n  msgs(state, { msgs }) {\n    return mergeWith({}, state, {\n      items: [\n        ...msgs,\n      ],\n      show: true,\n    }, addItems)\n  },\n  clear(state) {\n    return {\n      ...state,\n      items: [],\n      show: false,\n    }\n  },\n  display(state, { onOff }) {\n    return {\n      ...state,\n      show: onOff,\n    }\n  },\n}\n\nexport default makeReducer(flows, { items: [], busy: 0, show: false })\n\n/* SELECTORS */\n\nexport const getNotifications = ({ notify }) => {\n  const { items, busy, show } = notify\n  let lastNote = -1\n  let lastKind = ''\n  items.forEach((item, i) => {\n    const { kind } = item\n    if (kind == 'error') {\n      lastNote = i\n      lastKind = 'error'\n    }\n    else if (kind == 'warning') {\n      if (lastKind != 'error') {\n        lastNote = i\n        lastKind = 'warning'\n      }\n    }\n  })\n  return { notifications: items, busy, show, lastMsg: items.length - 1, lastNote, lastKind }\n}\n\n/* HELPERS */\n\nconst addItems = (objValue, srcValue, key) => {\n  if (key == 'items') {\n    return (objValue == null) ? srcValue : objValue.concat(srcValue)\n  }\n}\n\n\n\n\n// WEBPACK FOOTER //\n// src/js/app/dux/notify.js","import { combineReducers, createStore, applyMiddleware } from 'redux'\nimport thunkMiddleware from 'redux-thunk'\nimport { reducer as form } from 'redux-form'\n\nimport win from 'win'\nimport notify from 'notify'\nimport docs from 'docs'\nimport tables from 'tables'\nimport me from 'me'\nimport filters from 'filters'\nimport alter from 'alter'\nimport select from 'select'\n\n/* ACTIONS */\n\n/* global process */\n/* global require */\n\nconst configureStore = reducer => {\n  const middlewares = [thunkMiddleware]\n  const storeComponents = [reducer]\n  if (process.env.NODE_ENV === `development`) {\n    const { createLogger } = require(`redux-logger`)\n    middlewares.push(createLogger())\n    storeComponents.push(\n      window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__(),\n    )\n  }\n  storeComponents.push(\n    applyMiddleware(...middlewares),\n  )\n\n  const store = createStore(\n    ...storeComponents\n  )\n  return store\n}\n\n/* REDUCER */\n\nexport default configureStore(combineReducers({\n  win,\n  notify,\n  docs,\n  tables,\n  me,\n  filters,\n  alter,\n  form,\n  select,\n}))\n\n/* SELECTORS */\n\n/*\nexport const combineSelectors = function(...selectors) {\n  return (state, props) => {\n    const result = {}\n    for (const selector of selectors) {\n      Object.assign(result, selector(state, props))\n    }\n    return result\n  }\n}\n*/\n\n/* HELPERS */\n\n\n\n\n// WEBPACK FOOTER //\n// src/js/app/dux/roots.js","import merge from 'lodash/merge'\nimport { makeReducer } from 'utils'\n\n/* ACTIONS */\n\nexport const setSearch = (tag, search) => ({ type: 'setSearch', tag, search })\nexport const setPopUp = (tag, onOff) => ({ type: 'setPopUp', tag, onOff })\nexport const togglePopUp = tag => ({ type: 'togglePopUp', tag })\n\n/* REDUCER */\n\nconst flows = {\n  setSearch(state, { tag, search }) {\n    const init = initSelect(state, tag)\n    return merge(init, state, { [tag]: { search } })\n  },\n  setPopUp(state, { tag, onOff }) {\n    const init = initSelect(state, tag)\n    return merge(init, state, { [tag]: { popUp: onOff } })\n  },\n  togglePopUp(state, { tag }) {\n    const init = initSelect(state, tag)\n    const { [tag]: myState } = state\n    const newOnOff = (myState == null) ? true : !myState.popUp\n    return merge(init, state, { [tag]: { popUp: newOnOff } })\n  },\n}\n\nexport default makeReducer(flows, {})\n\n/* SELECTORS */\n\nexport const getSelect = ({ select }, { tag }) => ({ ...(select[tag] || {}) })\n\n/* HELPERS */\n\nconst initSelect = (state, tag) => {\n  const { [tag]: myState } = state\n  return (myState == null) ?\n    { [tag]: { search: '', popUp: false } } :\n    {}\n}\n\n\n\n// WEBPACK FOOTER //\n// src/js/app/dux/select.js","import mergeWith from 'lodash/mergewith'\nimport merge from 'lodash/merge'\nimport { createSelector } from 'reselect'\n\nimport { accessData } from 'server'\nimport { propsChanged, makeReducer } from 'utils'\n\n/* ACTIONS */\n/*\n * Most actions call accessData, which will dispatch the ultimate fetch action.\n */\n\nexport const fetchTable = table => (\n  accessData({ type: 'fetchTable', contentType: 'db', path: `/list?table=${table}`, desc: `${table} table`, table })\n)\nexport const fetchTableMy = table => (\n  accessData({ type: 'fetchTableMy', contentType: 'db', path: `/my?table=${table}`, desc: `${table} table (my records)`, table })\n)\nexport const fetchItem = (table, eId) => accessData({\n  type: 'fetchItem',\n  contentType: 'db',\n  path: `/view?table=${table}&id=${eId}`,\n  desc: `${table} record ${eId}`,\n  table,\n})\n\nexport const modItem = (table, eId, values) => accessData({\n  type: 'modItem',\n  contentType: 'db',\n  path: `/mod?table=${table}&action=update`,\n  desc: `${table} update record ${eId}`,\n  sendData: { _id: eId, values },\n  table,\n})\n\nexport const insertItem = table => accessData({\n  type: 'newItem',\n  contentType: 'db',\n  path: `/mod?table=${table}&action=insert`,\n  desc: `${table} insert new record`,\n  table,\n})\n\nexport const delItem = (table, eId) => accessData({\n  type: 'delItem',\n  contentType: 'db',\n  path: `/mod?table=${table}&action=delete`,\n  desc: `${table} delete record ${eId}`,\n  sendData: { _id: eId },\n  table,\n})\n\n/* REDUCER */\n\nconst flows = {\n  fetchTable(state, { data }) {\n    if (data == null) {return state}\n    return mergeWith({}, state, data, setComplete)\n  },\n  fetchTableMy(state, { data }) {\n    if (data == null) {return state}\n    return mergeWith({}, state, data, setComplete)\n  },\n  fetchItem(state, { data, table }) {\n    if (data == null) {return state}\n    const { values: { _id } } = data\n    const newState = merge({}, state, { [table]: { entities: { [_id]: data } } })\n    newState[table].entities[_id].values = data.values\n    return newState\n  },\n  modItem(state, { data, table }) {\n    if (data == null) {return state}\n    const { values: { _id }, newValues } = data\n    const newState = merge({}, state, { [table]: { entities: { [_id]: data } } })\n    newState[table].entities[_id].values = data.values\n\n    for (const { _id, rep, relTable, field } of newValues) {\n      newState[relTable].entities[_id] = { values: { _id, rep } }\n      newState[table].valueLists[field].unshift(_id)\n    }\n    return newState\n  },\n  newItem(state, { data, table }) {\n    if (data == null) {return state}\n    const { values: { _id } } = data\n    return mergeWith({}, state, { [table]: { lastInserted: _id, entities: { [_id]: data }, my: [_id] } }, addMy)\n  },\n  delItem(state, { data, table }) {\n    if (data == null) {return state}\n    const _id = data\n    const { [table]: { entities: { [_id]: del, ...otherEntities }, my, order } } = state\n    const otherMy = (my == null) ? null : my.filter(x => x != _id)\n    const otherOrder = (order == null) ? null : order.filter(x => x != _id)\n    return {\n      ...state,\n      [table]: {\n        ...state[table],\n        entities: otherEntities,\n        order: otherOrder,\n        my: otherMy,\n      },\n    }\n  },\n}\n\nexport default makeReducer(flows)\n\n/* SELECTORS */\n\nexport const getTables = ({ tables }) => ({ tables })\n\nexport const getTableFilters = ({ tables }, { table }) => {\n  const { [table]: { fields, filterList } } = tables\n  return { fields, filterList }\n}\n\nconst getValueList = ({ tables }, { table, field }) => {\n  const { [table]: { valueLists, fieldSpecs } } = tables\n  const { [field]: { valType } } = fieldSpecs\n  if (valueLists == null) {\n    return { valType, table }\n  }\n  const { [field]: valueList } = valueLists\n  return { valType, valueList, table }\n}\n\nconst computeOptions = ({ tables }, { valType, valueList, table }) => {\n  if (valueList == null) {\n    return { options: [], optionLookup: {} }\n  }\n  const options = valueList.map(val => ({ value: val, label: repr(tables, table, valType, val) }))\n  const optionLookup = {}\n  options.forEach(({ value: val, label: lab }) => {optionLookup[val] = lab})\n  return { options, optionLookup }\n}\n\nexport const getOptions = createSelector(\n  getTables,\n  getValueList,\n  computeOptions,\n)\n\n/* HELPERS */\n\nconst setComplete = (newValue, oldValue, key) => {\n  if (key == 'complete') {return newValue || oldValue}\n}\n\nconst addMy = (objValue, srcValue, key) => {\n  if (key == 'my') {\n    return (objValue == null) ? srcValue : objValue.concat(srcValue)\n  }\n}\n\nexport const needTables = (tables, tableNames, my = false) => {\n  if (tables == null) {return true}\n  const tNames = (Array.isArray(tableNames)) ? tableNames : [tableNames]\n  return tNames.some(table => (\n    tables[table] == null ||\n    (my && tables[table].my == null) ||\n    (!my && tables[table].order == null)\n  ))\n}\n\nexport const needValues = ({ tables, table, eId }) => (\n  tables == null || tables[table] == null || tables[table].entities[eId] == null || !tables[table].entities[eId].complete\n)\n\nexport const changedItem = (newProps, oldProps) => (\n  propsChanged(newProps, needValues, oldProps, ['table', 'eId'])\n)\n\nconst repUser = ({ user }, valId) => {\n  let valRep\n  const { entities: { [valId]: entity } } = user\n  if (entity) {\n    const { values: { eppn, firstName, lastName, emailPre, authority, mayLogin } } = entity\n    const email = emailPre || ''\n    let linkText = [firstName || '', lastName || ''].filter(x => x).join(' ')\n    if (linkText == '') {linkText = email}\n    const namePart = (linkText && email) ? (\n      `[${linkText}](mailto:${email})`\n    ) : (\n      linkText + email\n    )\n    const eppnPart = eppn ? ` eppn=${eppn} ` : ''\n    const authorityPart = authority ? ` authenticated by=${authority} ` : ''\n    const mayLoginPart = mayLogin ? ` active=${mayLogin} ` : ''\n    valRep = [namePart, eppnPart, authorityPart, mayLoginPart].filter(x => x).join('; ')\n  }\n  else {valRep = 'UNKNOWN'}\n  return valRep\n}\n\nconst repCountry = ({ country }, valId) => {\n  const { entities: { [valId]: entity } } = country\n  if (entity) {\n    const { values: { name, iso } } = entity\n    return `${iso}: ${name}`\n  }\n  else {return 'UNKNOWN'}\n}\n\nconst repValue = rel => (tables, valId) => {\n  const { [rel]: { entities: { [valId]: entity } } } = tables\n  if (entity) {\n    const { values: { rep } } = entity\n    return rep\n  }\n  else {return 'UNKNOWN'}\n}\n\nconst repMap = {\n  user: repUser,\n  country: repCountry,\n  default: repValue,\n}\n\nexport const repRelated = (tables, rel, valId) => (repMap[rel] || repMap.default(rel))(tables, valId)\n\nconst trimDate = text => ((text == null) ? '' : text.replace(/\\.[0-9]+/, ''))\n\nexport const repr = (tables, table, valType, value) => {\n  if (value == null) {return ''}\n  if (typeof valType == 'string') {\n    switch (valType) {\n      case 'datetime': return trimDate(value)\n      default: return value\n    }\n  }\n  else {\n    const { values: rel } = valType\n    return repRelated(tables, rel, value)\n  }\n}\n\n\n\n\n\n// WEBPACK FOOTER //\n// src/js/app/dux/tables.js","import { makeReducer } from 'utils'\n\n/* ACTIONS */\n\nexport const changeWinDim = () => dispatch => {\n  dispatch({ type: 'windim', ...initWinDim() })\n}\n\n/* REDUCER */\n\nconst flows = {\n  windim(state, { height, width }) {return { height, width }},\n}\n\nconst initWinDim = () => {\n  const { innerHeight: height, innerWidth: width } = window\n  return { height, width }\n}\n\nexport default makeReducer(flows, initWinDim())\n\n/* SELECTORS */\n\nexport const getWinDim = ({ win: { height, width } }) => ({ height, width })\n\n/* HELPERS */\n\nconst scrollBarWidth = 40\nconst leftMargin = 0\n\nconst topHeight = 50\nconst topMargin = 5\n\nconst divWidthSpec = {\n  left: 120,\n  rightLeft: 380,\n  rightLeftNav: 150,\n}\n\nconst floatSpec = {\n  left: 'left',\n  right: 'right',\n  rightLeft: 'left',\n  rightLeftNav: 'left',\n  rightRight: 'right',\n  rightRightBody: 'right',\n}\n\nexport function columnStyle(kind, { height, width }) {\n  const divHeight = {\n    left: height - topHeight,\n    right: height - topHeight,\n    rightLeft: height - topHeight - topMargin,\n    rightLeftNav: height - topHeight - topMargin,\n    rightRight: height - topHeight - topMargin,\n    rightRightBody: height - topHeight - topMargin,\n  }\n  const { left, rightLeft, rightLeftNav } = divWidthSpec\n  const divWidth = {\n    ...divWidthSpec,\n    right: width - left - scrollBarWidth,\n    rightRight: width - left - rightLeft - 2 * scrollBarWidth - leftMargin,\n    rightRightBody: width - left - rightLeftNav - 2 * scrollBarWidth - leftMargin,\n  }\n\n  return {\n    width: divWidth[kind],\n    height: divHeight[kind],\n    float: floatSpec[kind],\n  }\n}\n\n\n\n\n// WEBPACK FOOTER //\n// src/js/app/dux/win.js","import React from 'react'\nimport { render } from 'react-dom'\nimport { Router, Route, Redirect, IndexRoute, IndexRedirect, browserHistory } from 'react-router'\n\nimport Root from 'Root'\nimport App from 'App'\nimport SubApp from 'SubApp'\nimport Backoffice from 'Backoffice'\nimport ItemFiltered from 'ItemFiltered'\nimport Items from 'Items'\nimport ItemRecord from 'ItemRecord'\nimport Doc from 'Doc'\nimport NotFound from 'NotFound'\n\nrender(\n  <Root>\n    <Router history={browserHistory}>\n      <Redirect from=\"/about\" to=\"/docs/about.md\" />\n      <Redirect from=\"/docs/about\" to=\"/docs/about.md\" />\n      <Redirect from=\"/about.md\" to=\"/docs/about.md\" />\n      <Redirect from=\"/login\" to=\"/docs/about.md\" />\n      <Redirect from=\"/logout\" to=\"/docs/about.md\" />\n      <Redirect from=\"/slogout\" to=\"/docs/about.md\" />\n      <Route path=\"/\" component={App} >\n        <IndexRoute component={App} />\n        <IndexRedirect to=\"/docs/about.md\" />\n        <Route path=\"docs/:docFile\" component={Doc} />\n        <Route path=\"tech/docs/gen/:docFile\" component={Doc} />\n        <Route path=\"tech/docs/:docFile\" component={Doc} />\n        <Route path=\"data\" >\n          <Route path=\":table\" component={SubApp} >\n            <Route path=\"list\" component={ItemFiltered} />\n            <Route path=\"mylist\" component={Items} select={'my'} >\n              <Route path=\":eId\" component={ItemRecord} select={'my'} />\n            </Route>\n          </Route>\n        </Route>\n        <Route path=\"backoffice\" component={Backoffice} >\n          <Route path=\":table\" >\n            <Route path=\"list\" component={Items} select={'all'} >\n              <Route path=\":eId\" component={ItemRecord} select={'all'} />\n            </Route>\n          </Route>\n        </Route>\n      </Route>\n      <Route path=\"*\" component={NotFound} />\n    </Router>\n  </Root>\n  ,\n  document.getElementById('body')\n)\n\n\n\n\n// WEBPACK FOOTER //\n// src/js/app/main.jsx","import React, { Component } from 'react'\nimport { connect } from 'react-redux'\n\nimport { changeFacetAll, getFilterSetting, testAllChecks } from 'filters'\n\nconst indeterminate = states => !states.allTrue && !states.allFalse\n\nclass CheckboxI extends Component {\n  componentDidUpdate() {\n    const { props: { filterSetting } } = this\n    const states = testAllChecks(filterSetting)\n    this.dom.indeterminate = indeterminate(states)\n  }\n  handleCheck = () => {\n    const { props: {filterSetting, table, filterId, handle } } = this\n    const states = testAllChecks(filterSetting)\n    return handle(table, filterId, this.dom.indeterminate || !states.allTrue)\n  }\n  setIndeterminate = domElem => {\n    const { props: { filterSetting } } = this\n    const states = testAllChecks(filterSetting)\n    if (domElem) {\n      this.dom = domElem\n      domElem.indeterminate = indeterminate(states)\n    }\n  }\n  render() {\n    const { props: { filterSetting } } = this\n    const states = testAllChecks(filterSetting)\n    return (\n      <input\n          ref={this.setIndeterminate}\n          type=\"checkbox\"\n          checked={states.allTrue}\n          onChange={this.handleCheck}\n      />\n    )\n  }\n}\n\nexport default connect(getFilterSetting, { handle: changeFacetAll })(CheckboxI)\n\n\n\n// WEBPACK FOOTER //\n// src/js/app/object/CheckboxI.jsx","import React, {Component} from 'react'\nimport { connect } from 'react-redux'\nimport Markdown from 'react-markdown'\nimport { Link } from 'react-router'\n\nimport { getDoc, needDoc, changedDoc, fetchDoc } from 'docs'\n\nimport Alternative from 'Alternative'\n\nconst RouterLink = ({ children, href }) => (\n  href.match(/^(https?:)?\\/\\//)\n    ? <a href={href} >{children}</a>\n    : <Link to={href} >{children}</Link>\n)\nconst renderers = { Link: RouterLink }\n\nconst controlPlacement = control => <p style={{float: 'right'}} >{control}</p>\nconst controls = [\n  handler => <a className=\"control fa fa-hand-o-down\" href=\"#\" title=\"markdown source\" onClick={handler} />,\n  handler => <a className=\"control fa fa-file-code-o\" href=\"#\" title=\"formatted\" onClick={handler} />,\n]\n\nclass DocMd extends Component {\n  render() {\n    const {props: { docName, text } } = this\n\n    if (needDoc({ text })) {return <div>{`No document ${docName}`}</div>}\n    return (\n      <div style={{paddingLeft: '0.5em'}} >\n        <Alternative\n          tag={docName}\n          controlPlacement={controlPlacement}\n          controls={controls}\n          alternatives={[(\n            <div key=\"fmt\" >\n              <Markdown\n                source={text}\n                renderers={renderers}\n              />\n            </div>\n          ), (\n            <div key=\"src\" >\n              <pre className=\"md-source\" >{text}</pre>\n            </div>\n          )]}\n        />\n      </div>\n    )\n  }\n  componentDidMount() {\n    const { props, props: { fetch } } = this\n    fetch(props)\n  }\n  componentDidUpdate(prevProps) {\n    const { props, props: { fetch } } = this\n    if (changedDoc(props, prevProps)) {\n      fetch(props)\n    }\n  }\n}\n\nexport default connect(getDoc, { fetch: fetchDoc })(DocMd)\n\n\n\n// WEBPACK FOOTER //\n// src/js/app/object/DocMd.jsx","import React, { Component } from 'react'\nimport { connect } from 'react-redux'\nimport L from 'leaflet'\n\nimport {countryBorders} from 'europe.geo'\nimport { getFilterSetting } from 'filters'\nimport { getTables } from 'tables'\nimport { combineSelectors } from 'utils'\n\nimport ByValue from 'ByValue'\n\nconst mapOptions = {\n  HEIGHT: 250,\n  MAX_RADIUS: 25,\n  LEVEL_OFF: 10,\n  ZOOM_INIT: 3,\n  MAP_CENTER: [52, 12],\n  MAP_BOUNDS: [[30, -20], [70, 40]],\n  MARKER_COLOR: {\n    [true]: {\n      color: '#008800',\n      fillColor: '#00cc00',\n    },\n    [false]: {\n      color: '#888844',\n      fillColor: '#bbbb66',\n    },\n  },\n  MARKER_SHAPE: {\n    weight: 1,\n    fill: true,\n    fillOpacity: 0.8,\n  },\n  COUNTRY_STYLE: {\n    [true]: {\n      color: '#884422',\n      weight: 2,\n      fill: true,\n      fillColor: '#aa7766',\n      fillOpacity: 1,\n    },\n    [false]: {\n      color: '#777777',\n      weight: 1,\n      fill: true,\n      fillColor: '#bbbbbb',\n      fillOpacity: 1,\n    },\n  },\n}\n\nconst computeRadius = (_id, filteredAmountOthers, amounts) => {\n  const amount = amounts ? (amounts[_id] || 0) : 0\n  if (amount == 0) {return 0}\n  const { MAX_RADIUS, LEVEL_OFF } = mapOptions\n  const proportional = MAX_RADIUS * amount / filteredAmountOthers\n  if (filteredAmountOthers < LEVEL_OFF) {return proportional}\n  return LEVEL_OFF * Math.sqrt(proportional)\n}\n\nclass EUMap extends Component {\n  constructor(props) {\n    super(props)\n    this.features = {}\n  }\n  setMap = dom => {if (dom) {this.dom = dom}}\n  render() {\n    const { props: { tables, ...byValueProps }, setMap } = this\n    return (\n      <div>\n        <div\n          ref={setMap}\n        />\n        <ByValue {...byValueProps} />\n      </div>\n    )\n  }\n\n  componentDidMount() {\n    const {\n      props: { filterSetting, filteredAmountOthers, amounts, tables: { country } },\n      dom,\n    } = this\n    const { HEIGHT, MAP_CENTER, ZOOM_INIT, MAP_BOUNDS, MARKER_COLOR, MARKER_SHAPE, COUNTRY_STYLE } = mapOptions\n    dom.style.height = HEIGHT\n    this.map = L.map(dom, {\n      attributionControl: false,\n      center: MAP_CENTER,\n      zoom: ZOOM_INIT,\n      maxBounds: MAP_BOUNDS,\n    })\n    const { order, entities } = country\n    this.idFromIso = {}\n    order.forEach(_id => {\n      const { [_id]: { values: { iso } } } = entities\n      this.idFromIso[iso] = _id\n    })\n    L.geoJSON(countryBorders, {\n      style: feature => COUNTRY_STYLE[this.inDariah(feature)],\n      onEachFeature: feature => {\n        if (this.inDariah(feature)) {\n          const { properties: { iso2, lat, lng } } = feature\n          const { idFromIso: { [iso2]: _id } } = this\n          const { [_id]: isOn } = filterSetting\n          const marker = L.circleMarker([lat, lng], {\n            ...MARKER_COLOR[isOn],\n            radius: computeRadius(_id, filteredAmountOthers, amounts),\n            ...MARKER_SHAPE,\n            pane: 'markerPane',\n          }).addTo(this.map)\n          this.features[iso2] = marker\n        }\n      },\n    }).addTo(this.map)\n  }\n\n  inDariah = feature => !!this.idFromIso[feature.properties.iso2]\n\n  componentDidUpdate() {\n    const { props: { filterSetting, filteredAmountOthers, amounts } } = this\n    const { MARKER_COLOR } = mapOptions\n    Object.entries(this.features).forEach(([iso2, marker]) => {\n      const { idFromIso: { [iso2]: _id } } = this\n      const { [_id]: isOn } = filterSetting\n      marker.setRadius(computeRadius(_id, filteredAmountOthers, amounts))\n      marker.setStyle(MARKER_COLOR[isOn])\n    })\n  }\n}\n\nEUMap.displayName = 'EUMap'\n\nexport default connect(combineSelectors(getTables, getFilterSetting))(EUMap)\n\n\n\n// WEBPACK FOOTER //\n// src/js/app/object/EUMap.jsx","import React, { Component } from 'react'\nimport { connect } from 'react-redux'\n\nimport { setupFiltering, getFiltersApplied } from 'filters'\n\nimport ItemList from 'ItemList'\nimport Filter from 'Filter'\nimport Pane from 'Pane'\n\n\nclass FilterCompute extends Component {\n  constructor(props) {\n    super()\n    const { tables, table, initialized, init } = props\n    if (!initialized) {init(tables, table)}\n  }\n  render() {\n    const { props: { initialized } } = this\n    if (!initialized) {return <div />}\n    const { props: { tables, table, filteredData, filteredAmountOthers, amounts} } = this\n    const { [table]: { order, title } } = tables\n    return (\n      <div>\n        <Pane format=\"sized\" position=\"rightLeft\">\n          <p>{'Total '}<span className=\"good-o\" >{order.length}</span></p>\n          <Filter\n            table={table}\n            filteredAmount={filteredData.length}\n            filteredAmountOthers={filteredAmountOthers}\n            amounts={amounts}\n          />\n        </Pane>\n        <Pane format=\"sized\" position=\"rightRight\">\n          <ItemList table={table} title={title} filteredData={filteredData} inplace={true} />\n        </Pane>\n      </div>\n    )\n  }\n}\n\nexport default connect(getFiltersApplied, { init: setupFiltering })(FilterCompute)\n\n\n\n// WEBPACK FOOTER //\n// src/js/app/object/FilterCompute.jsx","import React, { Component } from 'react'\nimport { connect } from 'react-redux'\n\nimport { withParams } from 'utils'\nimport { getTables, needTables, fetchTable } from 'tables'\n\nimport FilterCompute from 'FilterCompute'\n\nclass ItemFiltered extends Component {\n  render() {\n    const { props: { table, tables } } = this\n    if (needTables(tables, table)) {return <div />}\n    return (\n      <FilterCompute table={table} />\n    )\n  }\n  componentDidMount() {\n    const { props: { table, tables, fetch } } = this\n    if (needTables(tables, table)) {fetch(table)}\n  }\n}\n\nexport default connect(getTables, { fetch: fetchTable })(withParams(ItemFiltered))\n\n\n\n// WEBPACK FOOTER //\n// src/js/app/object/ItemFiltered.jsx","import React, { Component } from 'react'\nimport { connect } from 'react-redux'\n\nimport { withParams } from 'utils'\nimport { getTables, needValues, changedItem, fetchItem, insertItem, delItem } from 'tables'\n\nimport ItemForm from 'ItemForm'\n\nconst NEW = 'new'\n\nclass ItemRecord extends Component {\n  getEntity = () => {\n    const { props: { tables, table, eId } } = this\n    const { [table]: { entities: { [eId]: entity } } } = tables\n    return entity\n  }\n  handleDelete = event => {\n    event.preventDefault()\n    const { props: { table, eId, del, router } } = this\n    del(table, eId)\n    const locBase = `/${table}/mylist#`\n    router.push(locBase)\n  }\n  render() {\n    const { props: { tables, table, eId } } = this\n    if (needValues({ tables, table, eId })) {return <div />}\n\n    const entity = this.getEntity()\n    const { values: initialValues, perm, fields } = entity\n    return (\n      <div>\n        <p>{\n          perm.delete ?\n            <span\n              key=\"delete\"\n              className={'fa fa-trash button-large delete'}\n              title=\"delete this item\"\n              onClick={this.handleDelete}\n            /> :\n          null\n        }\n        </p>\n        <ItemForm\n          table={table}\n          eId={eId}\n          initialValues={initialValues}\n          perm={perm}\n          fields={fields}\n          form={`${table}-${eId}`}\n          key={`${table}-${eId}`}\n        />\n      </div>\n    )\n    /* Note the key prop passed to ItemForm.\n     * If you do not pass it, you get bugs caused by the mounting and unmounting of this component\n     * due to react-router navigation.\n     * In essence, the callback onChange that redux-form passes to input components, becomes bound to the wrong form!\n     * This workaround is documented here: https://github.com/erikras/redux-form/issues/2886\n    */\n  }\n  gotoNewItem() {\n    const { props: { tables, table, router, insert, select, location: { pathname } } } = this\n    const { [table]: tableInfo } = tables\n    if (tableInfo == null) {return}\n    const base = /^\\/([^/]+)/.exec(pathname)[1]\n    const verb = (select == 'my') ? 'mylist' : 'list'\n    const locBase = `/${base}/${table}/${verb}`\n    const { lastInserted = '' } = tableInfo\n    const { prevInserted } = this\n    if (prevInserted != null) {\n      if (prevInserted != lastInserted) {\n        this.prevInserted = null\n        router.push(`${locBase}/${lastInserted}`)\n      }\n    }\n    else {\n      this.prevInserted = lastInserted\n      insert(table)\n    }\n  }\n  componentDidMount() {\n    const { props, props: { table, eId, fetch } } = this\n    if (eId == NEW) {this.gotoNewItem()}\n    else if (changedItem(props, null)) {fetch(table, eId)}\n  }\n  componentDidUpdate() {\n    const { props, props: { table, eId, fetch } } = this\n    if (eId == NEW) {this.gotoNewItem()}\n    else if (changedItem(props, null)) {fetch(table, eId)}\n  }\n}\n\nexport default connect(getTables, { fetch: fetchItem, insert: insertItem, del: delItem })(withParams(ItemRecord))\n\n\n\n\n// WEBPACK FOOTER //\n// src/js/app/object/ItemRecord.jsx","import React, { Component } from 'react'\nimport { connect } from 'react-redux'\nimport { Link } from 'react-router'\n\nimport { withParams } from 'utils'\nimport { getTables, needTables, fetchTable, fetchTableMy } from 'tables'\n\nimport ItemList from 'ItemList'\nimport Pane from 'Pane'\n\nclass Items extends Component {\n  render() {\n    const { props: { table, tables, children, select, location: { pathname } } } = this\n    //if (needTables(tables, table, true) || needTables(tables, ['country', 'user'])) {return <div />}\n    const base = /^\\/([^/]+)/.exec(pathname)[1]\n    const verb = (select == 'my') ? 'mylist' : 'list'\n    if (needTables(tables, table, select == 'my')) {return <div />}\n    const { [table]: { title, perm, my, order } } = tables\n    const itemList = (select == 'my') ? my : order\n    return (\n      <div>\n        <Pane format=\"nav sized\" position=\"rightLeftNav\">\n          <p>\n            {`${itemList.length} items `}\n            {(perm != null && perm.insert) ? (\n              <Link to={`/${base}/${table}/${verb}/new`}>\n                <span className=\"fa fa-plus\" title={`new ${table}`} />\n              </Link>\n            ) : null}\n          </p>\n          <ItemList table={table} title={title} filteredData={itemList} inplace={false} base={base} verb={verb} />\n        </Pane>\n        <Pane format=\"sized\" position=\"rightRightBody\">\n          { children }\n        </Pane>\n      </div>\n    )\n  }\n  componentDidMount() {\n    const { props: { tables, table, select, fetch, fetchMy } } = this\n    const f = (select == 'my') ? fetchMy : fetch\n    if (needTables(tables, table, select == 'my')) {f(table)}\n  }\n  componentDidUpdate() {\n    const { props: { tables, table, select, fetch, fetchMy } } = this\n    const f = (select == 'my') ? fetchMy : fetch\n    if (needTables(tables, table, select == 'my')) {f(table)}\n  }\n}\n\nexport default connect(getTables, { fetch: fetchTable, fetchMy: fetchTableMy })(withParams(Items))\n\n\n\n\n// WEBPACK FOOTER //\n// src/js/app/object/Items.jsx","import React, {Component} from 'react'\nimport { connect } from 'react-redux'\n\nimport { getMe, fetchMe } from 'me'\n\nclass Login extends Component {\n  render() {\n    const { props: { me } } = this\n    return (\n      <span className=\"login\" >{\n        me.eppn && Object.keys(me).length > 0 ? (\n          <span>\n            <strong className=\"fa fa-user\" title={me.eppn} >{me.eppn.split('@')[0]}</strong>\n            <span className=\"fa fa-hashtag\" />{me.authority}{' '}\n            <em>{me.groupDesc || 'not authenticated'}</em>\n            <a href=\"/logout\" className=\"control fa fa-user-times\" title=\"log out\" />\n            <a href=\"/slogout\" className=\"control fa fa-users\" title=\"sign out\" />\n          </span>\n        ) : (\n          <a href=\"/login\" className=\"control fa fa-user-plus\" >{' login'}</a>\n        )}\n      </span>\n    )\n  }\n  componentDidMount() {\n    const { props: { fetch } } = this\n    fetch({ type: 'fetchMe', contentType: 'db', path: '/who/ami', desc: 'me' })\n  }\n}\n\nexport default connect(getMe, { fetch: fetchMe })(Login)\n\n\n\n\n// WEBPACK FOOTER //\n// src/js/app/object/Login.jsx","import React, { Component } from 'react'\nimport { connect } from 'react-redux'\n\nimport { getNotifications, clear, display } from 'notify'\n\nclass Notification extends Component {\n  constructor(props) {\n    super(props)\n    this.dom = {}\n  }\n  refDom = label => dom => {\n    if (dom) {this.dom[label] = dom}\n  }\n  handleBox = () => {\n    const { props: { show, display } } = this\n    display(!show)\n  }\n  handleHide = () => {\n    const { props: { display } } = this\n    display(false)\n  }\n  handleClear = () => {\n    const { props: { clear } } = this\n    clear()\n  }\n\n  render() {\n    const { props: { notifications, lastNote, lastKind, busy, show } } = this\n    const highlight = lastNote > -1\n    const busyBlocks = new Array((busy < 0) ? 0 : busy).fill(1)\n    return (\n      <div>\n        <p className=\"msg-spinner\" >\n          <span\n            title=\"show/hide notifications and progress messages\"\n            className={highlight ? `spin-${lastKind}` : 'spin-ok'}\n          >\n            { busyBlocks.map((b, i) => <span key={i} className=\"msg-dot fa fa-caret-left\" />) }\n            <span\n              className={`fa fa-${busy == 0 ? 'circle-o' : 'spinner fa-spin'}`}\n              onClick={this.handleBox}\n            />\n          </span>\n        </p>\n        {show ? (\n          <div\n            ref={this.refDom('notbox')}\n            className=\"msg-box\"\n            onClick={this.handleHide}\n          >{\n            (notifications).map((msg, i) => (\n              <p\n                key={i}\n                ref={this.refDom(`m${i}`)}\n                className={`msg-line ${[msg.kind]}-o ${(msg.kind != 'info') ? 'msg-high' : ''}`}\n              >{msg.text}</p>\n            ))\n          }\n            <p className=\"msg-dismiss\" >{'(click panel to hide)'}</p>\n            <p className=\"msg-trash\" >\n              <a\n                href=\"#\"\n                title=\"clear messages\"\n                className=\"control fa fa-trash\"\n                onClick={this.handleClear}\n              />\n            </p>\n          </div>\n        ) : null}\n      </div>\n    )\n  }\n  componentDidMount() {this.setView()}\n  componentDidUpdate() {this.setView()}\n\n  setView() {\n    const { props: { show } } = this\n    if (show) {this.setScroll()}\n  }\n  setScroll() {\n    const { props: { show } } = this\n    if (show) {\n      const { props: { lastMsg, lastNote } } = this\n      const highlight = lastNote > -1\n      if (highlight) {\n        this.dom[`m${lastNote}`].scrollIntoView()\n      }\n      else {\n        if (lastMsg > -1) {\n          this.dom[`m${lastMsg}`].scrollIntoView()\n        }\n      }\n    }\n  }\n}\n\nexport default connect(getNotifications, { clear, display })(Notification)\n\n\n\n// WEBPACK FOOTER //\n// src/js/app/object/Notification.jsx","import { Component, Children } from 'react'\nimport { connect } from 'react-redux'\nimport throttle from 'lodash/throttle'\n\nimport { changeWinDim } from 'win'\n\nclass Window extends Component {\n  render() {\n    const { props: { children } } = this\n    return Children.only(children)\n  }\n  newWindowSize = throttle(() => {\n    const { props: { resize } } = this\n    resize()\n  }, 1000)\n\n  componentDidMount() {window.addEventListener(\"resize\", this.newWindowSize)}\n  componentWillUnmount() {window.removeEventListener(\"resize\", this.newWindowSize)}\n}\n\nexport default connect(null, { resize: changeWinDim })(Window)\n\n\n\n// WEBPACK FOOTER //\n// src/js/app/object/Window.jsx","import React from 'react'\n\nimport DocMd from 'DocMd'\nimport DocPdf from 'DocPdf'\nimport DocHtml from 'DocHtml'\nimport NotFound from 'NotFound'\n\nconst docType = {\n  md: DocMd,\n  pdf: DocPdf,\n  html: DocHtml,\n}\n\nconst Doc = ({ location: { pathname: docPath } }) => {\n  const [docDir, docFile] = /^(.*)\\/([^/]+)$/g.exec(docPath).slice(1)\n  const [docName, docExt] = /^(.*)\\.([^.]+)$/g.exec(docFile).slice(1)\n  const { [docExt]: DocClass } = docType\n  return DocClass == null ? (\n    <NotFound splat={`document ${docPath}`} />\n  ) : (\n    <DocClass docDir={docDir} docName={docName} docExt={docExt} tag={docName} />\n  )\n}\n\nexport default Doc\n\n\n\n// WEBPACK FOOTER //\n// src/js/app/pure/Doc.jsx","import React from 'react'\n\nconst DocHtml = ({ docDir, docName, docExt }) => {\n  const src = `/api/file${docDir}/${docName}.${docExt}`\n  return (\n    <iframe\n      height=\"100%\"\n      width=\"100%\"\n      src={src}\n    />\n  )\n}\n\nexport default DocHtml\n\n\n\n// WEBPACK FOOTER //\n// src/js/app/pure/DocHtml.jsx","import React from 'react'\n\nconst DocPdf = ({ docDir, docName, docExt }) => {\n  const href = `/api/file${docDir}/${docName}.${docExt}`\n  const iOS = /iPad|iPhone|iPod/.test(navigator.userAgent) && !window.MSStream\n  return iOS ? (\n    <p>\n      <a target=\"_blank\" rel=\"noopener noreferrer\" href={href} >{docName}</a>{' (open pdf in a new tab)'}\n    </p>\n  ) : (\n    <object\n      height=\"100%\"\n      width=\"100%\"\n      data={href}\n      type=\"application/pdf\"\n    >\n      <a target=\"_blank\" rel=\"noopener noreferrer\" href={href} >{docName}</a>{' (open pdf in a new tab)'}\n    </object>\n  )\n}\n\nexport default DocPdf\n\n\n\n// WEBPACK FOOTER //\n// src/js/app/pure/DocPdf.jsx","import React from 'react'\n\nimport { editClass } from 'utils'\n\nconst Input = ({ meta: { dirty, invalid, error }, input, type }) => (\n  <span>\n    <input type={type} className={editClass(dirty, invalid)} {...input} />\n    {error && <span className=\"invalid diag\">{error}</span>}\n  </span>\n)\n\nexport default Input\n\n\n\n// WEBPACK FOOTER //\n// src/js/app/pure/Input.jsx","import React from 'react'\nimport { Field } from 'redux-form'\n\nimport { editClass } from 'utils'\n\nconst fieldRemove = (fields, i) => () => {fields.remove(i)}\nconst fieldPush = fields => () => {fields.push()}\n/* N.B.\n * fieldRemove and fieldPush MUST NOT be memoized.\n * Otherwise they may become bound to the wrong form.\n * This happens if you navigate with react-router between forms.\n */\n\nconst InputMulti = ({\n  componentSingle, validateSingle, normalizeSingle,\n  meta: { dirty, invalid, error },\n  fields, table, eId, name,\n  ...props\n}) => (\n  <div\n    className={editClass(dirty, invalid)}\n  >\n    {fields.map((field, i) =>\n      <p\n        key={field}\n        className=\"multi\"\n      >\n        <Field\n          name={field}\n          component={componentSingle}\n          validate={validateSingle}\n          normalize={normalizeSingle}\n          label={i}\n          table={table}\n          eId={eId}\n          {...props}\n        />\n        <span\n          className=\"button-small fa fa-close\"\n          title=\"remove\"\n          onClick={fieldRemove(fields, i)}\n        />\n      </p>\n    )}\n    <p>\n      <span\n        className=\"button-small fa fa-plus\"\n        onClick={fieldPush(fields)}\n      />\n    </p>\n    {error && <p className=\"invalid diag\">{error}</p>}\n  </div>\n)\n\nexport default InputMulti\n\n\n\n// WEBPACK FOOTER //\n// src/js/app/pure/InputMulti.jsx","import React from 'react'\nimport { reduxForm } from 'redux-form'\n\nimport { memoize } from 'memo'\n\nimport Alternative from 'Alternative'\nimport ItemRecord from 'ItemRecord'\nimport NavLink from 'NavLink'\n\nconst MyItemHeadPure = ({ table, eId, entityHead, dirty, base, verb }) => (\n  <NavLink className={'nav'} to={`/${base}/${table}/${verb}/${eId}`} >\n    {dirty ? <span className=\"fa fa-pencil\" /> : null}\n    <span className={`${dirty ? 'warning' : ''}`} >{entityHead}</span>\n  </NavLink>\n)\n\nconst MyItemHead = reduxForm({\n  destroyOnUnmount: false,\n  enableReinitialize: true,\n  keepDirtyOnReinitialize: true,\n})(MyItemHeadPure)\n\nconst controls = [\n  handler => (<span className=\"button-small fa fa-chevron-down\" onClick={handler} />),\n  handler => (<span className=\"button-small fa fa-chevron-right\" onClick={handler} />),\n]\nconst controlPlacement = memoize(entityHead => control => (\n  <p>\n    {control}\n    <span>\n      {entityHead}\n    </span>\n  </p>\n))\n\n\nconst ItemHead = ({ table, values, title, inplace, base, verb }) => {\n  const { _id: eId, [title]: entityHead = '-empty-' } = values\n\n  return (\n    <tr id={eId} >\n      <td>{\n        inplace ? (\n          <Alternative\n            tag={`${table}_${eId}`}\n            controlPlacement={controlPlacement(entityHead)}\n            controls={controls}\n            alternatives={[(\n              <ItemRecord\n                key=\"show\"\n                table={table}\n                eId={eId}\n              />\n            ), '']}\n            initial={1}\n          />\n        ) : (\n          <MyItemHead\n            form={`${table}-${eId}`}\n            table={table}\n            eId={eId}\n            entityHead={entityHead}\n            base={base}\n            verb={verb}\n          />\n        )\n      }\n      </td>\n    </tr>\n  )\n}\n\nexport default ItemHead\n\n\n\n// WEBPACK FOOTER //\n// src/js/app/pure/ItemHead.jsx","import React from 'react'\nimport Markdown from 'react-markdown'\n\nimport { editClass } from 'utils'\n\nimport Alternative from 'Alternative'\n\nconst controlPlacement = control => <p className=\"stick\" >{control}</p>\nconst controls = [\n  handler => <span className=\"button-medium fa fa-pencil\" onClick={handler} />,\n  handler => <span className=\"button-medium fa fa-hand-o-down\" onClick={handler} />,\n]\n\nconst MarkdownArea = ({ table, eId, meta: { dirty, invalid, error }, input: { name, value }, input }) => (\n  <Alternative\n    tag={`md_${table}_${eId}_${name}`}\n    controlPlacement={controlPlacement}\n    controls={controls}\n    className=\"md-field\"\n    alternatives={[\n      <Markdown\n        className={editClass(dirty, invalid)}\n        key=\"fmt\"\n        source={value}\n      />,\n      <span key=\"src\" >\n        <textarea\n          className={`input ${editClass(dirty, invalid)}`}\n          {...input}\n          wrap=\"soft\"\n        />\n        {error && <span className=\"invalid diag\">{error}</span>}\n      </span>,\n    ]}\n    initial={1}\n  />\n)\n\nexport default MarkdownArea\n\n\n\n// WEBPACK FOOTER //\n// src/js/app/pure/MarkdownArea.jsx","import React from 'react'\nimport { Link } from 'react-router'\n\nconst NavLink = props => <Link {...props} activeClassName=\"active\" />\n\nexport default NavLink\n\n\n\n// WEBPACK FOOTER //\n// src/js/app/pure/NavLink.jsx","import React from 'react'\n\nconst NotFound = ({ splat }) => (<h1>{'404: '}<code>{splat}</code>{' not found on this site.'}</h1>)\n\nexport default NotFound\n\n\n\n\n// WEBPACK FOOTER //\n// src/js/app/pure/NotFound.jsx","import React from 'react'\nimport { Provider } from 'react-redux'\n\nimport store from 'roots'\nimport Window from 'Window'\n\nconst Root = ({ children }) => (\n  <Provider store={store}>\n    <Window>\n      {children}\n    </Window>\n  </Provider>\n)\n\nexport default Root\n\n\n\n// WEBPACK FOOTER //\n// src/js/app/pure/Root.jsx","import React from 'react'\n\nconst Stat = ({subTotal, total}) => (\n  <span className=\"good-o\" >\n    {subTotal == null ? '' : `${subTotal}`}\n    {(total == null || subTotal == null) ? '' : ' of '}\n    <strong>{total == null ? '' : `${total}`}</strong>\n  </span>\n)\n\nexport default Stat\n\n\n\n// WEBPACK FOOTER //\n// src/js/app/pure/Stat.jsx","import React from 'react'\n\nimport NavLink from 'NavLink'\n\nconst Static = () => (\n  <span className=\"small\" >\n    <NavLink to=\"/docs/about.md\" >{'About'}</NavLink>\n    <NavLink to=\"/tech/docs/design.pdf\" >{'diagrams'}</NavLink>\n    <a href=\"https://dans-labs.github.io/dariah/\" target=\"_blank\" rel=\"noopener noreferrer\" >{'tech doc'}</a>\n  </span>\n)\n\nexport default Static\n\n\n\n\n// WEBPACK FOOTER //\n// src/js/app/pure/Static.jsx","import React from 'react'\nimport { connect } from 'react-redux'\n\nimport { getAlt, nextAlt } from 'alter'\n\nconst handleNext = (tag, alternatives, initial, next) => event => {\n  event.preventDefault()\n  next(tag, alternatives.length, initial)\n}\n\nconst Alternative = ({ controlPlacement, controls, alt, alternatives, className, tag, initial, next }) => (\n  <div className={className}>\n    {controlPlacement(controls[alt](handleNext(tag, alternatives, initial, next)))}\n    {alternatives[alt]}\n  </div>\n)\n\nexport default connect(getAlt, { next: nextAlt })(Alternative)\n\n\n\n// WEBPACK FOOTER //\n// src/js/app/state/Alternative.jsx","import React from 'react'\nimport { connect } from 'react-redux'\n\nimport { getWinDim } from 'win'\n\nimport Login from 'Login'\nimport NavLink from 'NavLink'\nimport Static from 'Static'\nimport Notification from 'Notification'\n\nconst App = ({ children, height, width }) => {\n  const text = `${width} x ${height}`\n  return (\n    <div>\n      <Notification />\n      <p className=\"nav small top\" >\n        <img\n          src=\"/static/images/inkind_logo_small.png\"\n          title=\"information about this site\"\n        />\n        <NavLink to=\"/data/contrib\" >{'Contributions'}</NavLink>\n        <NavLink to=\"/backoffice\" >{'Backoffice'}</NavLink>\n        <Static />\n        <span className=\"resize\" title={text}>{text}</span>\n        <Login />\n      </p>\n      <div>{children}</div>\n    </div>\n  )\n}\n\nexport default connect(getWinDim)(App)\n\n\n\n// WEBPACK FOOTER //\n// src/js/app/state/App.jsx","import React from 'react'\n\nimport { withParams } from 'utils'\n\nimport NavLink from 'NavLink'\nimport Pane from 'Pane'\n\nconst Backoffice = ({ children }) => (\n  <div>\n    <Pane format=\"nav sized\" position=\"left\">\n      <div>\n        <p><NavLink to={`/backoffice/package/list`} >{'Packages'}</NavLink></p>\n      </div>\n    </Pane>\n    <Pane format=\"sized\" position=\"right\">\n      { children }\n    </Pane>\n  </div>\n)\n\nexport default withParams(Backoffice)\n\n\n\n// WEBPACK FOOTER //\n// src/js/app/state/Backoffice.jsx","import React from 'react'\nimport { connect } from 'react-redux'\n\nimport { memoize } from 'memo.js'\nimport { getFieldValues, placeFacets } from 'filters.js'\n\nimport Facet from 'Facet.jsx'\nimport CheckboxI from 'CheckboxI.jsx'\nimport Stat from 'Stat.jsx'\nimport Alternative from 'Alternative.jsx'\n\nconst controls = [\n  handler => (<span className=\"button-small fa fa-chevron-down\" onClick={handler} />),\n  handler => (<span className=\"button-small fa fa-chevron-right\" onClick={handler} />),\n]\nconst controlPlacement = memoize((table, filterId, filterLabel, filteredAmount, filteredAmountOthers) => control => (\n  <p className=\"facet\" >\n    <CheckboxI\n      table={table}\n      filterId={filterId}\n    /> {filterLabel}{' '}\n    <Stat subTotal={filteredAmount} total={filteredAmountOthers} />{' '}\n    {control}\n  </p>\n))\n\nconst ByValue = ({\n  table,\n  filterId, filterLabel,\n  fieldValues,\n  filteredAmount, filteredAmountOthers,\n  amounts, maxCols,\n  expanded,\n}) => {\n  const rows = placeFacets(fieldValues, maxCols)\n  return (\n    <div className=\"facet\" >{\n      rows === null ? (<p>{' -no facets '}</p>) : (\n        <Alternative\n          tag={`${table}_${filterId}`}\n          controlPlacement={controlPlacement(table, filterId, filterLabel, filteredAmount, filteredAmountOthers)}\n          controls={controls}\n          initial={expanded ? 0 : 1}\n          alternatives={[\n            (<table\n              key=\"table\"\n              className=\"facets\"\n             >\n              <tbody>\n                {rows.map((entity, i) => (\n                  <tr key={i} >\n                    {entity.map((f, j) => {\n                      if (f === null) {\n                        return <td key={j} />\n                      }\n                      const [valueId, valueRep] = f\n                      const facetClass = (j == 0) ? 'facet' : 'facet mid'\n                      return [(\n                        <td\n                         key={valueId}\n                         className={facetClass}\n                        >\n                          <Facet\n                            table={table}\n                            filterId={filterId}\n                            valueId={valueId}\n                            valueRep={valueRep}\n                          />\n                        </td>\n                      ), (\n                        <td\n                          key=\"stat\"\n                          className=\"statistic\"\n                        >\n                          <Stat subTotal={amounts[valueId]} />\n                        </td>\n                      )]\n                    })}\n                  </tr>\n                  ))}\n              </tbody>\n            </table>),\n            (<div key=\"div\" />),\n          ]}\n        />\n      )}\n    </div>\n  )\n}\n\nexport default connect(getFieldValues)(ByValue)\n\n\n\n// WEBPACK FOOTER //\n// src/js/app/state/ByValue.jsx","import React from 'react'\nimport { connect } from 'react-redux'\n\nimport { memoize } from 'memo'\nimport { changeFacet, getFilterSetting } from 'filters'\n\nconst handleChange = memoize((handle, table, filterId, valueId, isOn) => () => handle(table, filterId, valueId, !isOn))\n\nconst Facet = ({ table, filterId, valueId, valueRep, filterSetting, handle }) => {\n  const { [valueId]: isOn } = filterSetting\n  return (\n    <span>\n      <input\n        type=\"checkbox\"\n        checked={isOn}\n        className=\"facet\"\n        onChange={handleChange(handle, table, filterId, valueId, isOn)}\n      />\n      {` ${valueRep}`}\n    </span>\n  )\n}\n\nexport default connect(getFilterSetting, { handle: changeFacet })(Facet)\n\n\n\n// WEBPACK FOOTER //\n// src/js/app/state/Facet.jsx","import React from 'react'\nimport { connect } from 'react-redux'\nimport { Field, FieldArray } from 'redux-form'\n\nimport { validation, normalization, getValType } from 'fields'\nimport { getTables } from 'tables'\n\nimport InputMulti from 'InputMulti'\nimport RelSelect from 'RelSelect'\n\nconst FieldEdit = ({ field, tables, table, eId, ...props }) => {\n  const { [table]: { fieldSpecs } } = tables\n  const { [field]: { valType, multiple } } = fieldSpecs\n  if (typeof valType == 'string') {\n    const typing = getValType(valType)\n    const { component, type } = typing\n    const { [valType]: validate } = validation\n    const { [valType]: normalize } = normalization\n    if (multiple) {\n      return (\n        <FieldArray\n          name={field}\n          component={InputMulti}\n          componentSingle={component}\n          validateSingle={validate}\n          normalizeSingle={normalize}\n          table={table}\n          eId={eId}\n          type={type}\n          {...props}\n        />\n      )\n    }\n    else {\n      return (\n        <Field\n          name={field}\n          component={component}\n          validate={validate}\n          normalize={normalize}\n          table={table}\n          eId={eId}\n          type={type}\n          {...props}\n        />\n      )\n    }\n  }\n  else {\n    const { allowNew } = valType\n    const tag = `${table}-${eId}-${field}`\n    return (\n      <span>\n        <Field\n          name={field}\n          component={RelSelect}\n          tag={tag}\n          field={field}\n          multiple={multiple}\n          allowNew={allowNew}\n          table={table}\n          eId={eId}\n          {...props}\n        />\n      </span>\n    )\n  }\n}\n\nexport default connect(getTables)(FieldEdit)\n\n\n\n// WEBPACK FOOTER //\n// src/js/app/state/FieldEdit.jsx","import React from 'react'\nimport { connect } from 'react-redux'\nimport Markdown from 'react-markdown'\n\nimport { getTables, repr } from 'tables'\n\nconst FieldRead = ({ field, tables, table, myValues }) => {\n  const { [table]: { fieldSpecs } } = tables\n  const { [field]: { valType, multiple } } = fieldSpecs\n  if (valType == 'textarea') {\n    if (myValues == null || (multiple && myValues.length == 0)) {return ''}\n    else {\n      const myRepr = multiple ?\n        myValues.map(value => repr(tables, table, valType, value)).join('\\n\\n') :\n        repr(tables, table, valType, myValues)\n      return <Markdown source={myRepr} />\n    }\n  }\n  else {\n    let myRepr\n    if (multiple) {\n      myRepr = (myValues || []).map(value => repr(tables, table, valType, value)).join(' | ')\n    }\n    else {\n      myRepr = repr(tables, table, valType, myValues)\n    }\n    return <span>{myRepr}</span>\n  }\n}\n\nexport default connect(getTables)(FieldRead)\n\n\n\n// WEBPACK FOOTER //\n// src/js/app/state/FieldRead.jsx","import React from 'react'\nimport { connect } from 'react-redux'\n\nimport { getTableFilters } from 'tables'\n\nimport Fulltext from 'Fulltext'\nimport ByValue from 'ByValue'\nimport EUMap from 'EUMap'\n\nconst filterClass = {\n  Fulltext,\n  EUMap,\n  ByValue,\n}\n\nconst Filter = ({\n  table, fields,\n  filterList, filteredAmount, filteredAmountOthers, amounts,\n}) => (\n  <div>\n    {filterList.filter(x => fields[x.field]).map((filter, filterId) => {\n      const { type } = filter\n      const { [type]: Fclass } = filterClass\n      return (\n        <Fclass\n          key={filterId}\n          table={table}\n          filterId={filterId}\n          filterField={filter.field}\n          filterLabel={filter.label}\n          maxCols={filter.maxCols}\n          filteredAmount={filteredAmount}\n          filteredAmountOthers={filteredAmountOthers[filterId]}\n          amounts={amounts[filterId]}\n          expanded={filter.expanded}\n        />\n      )}\n    )}\n  </div>\n)\n\nexport default connect(getTableFilters)(Filter)\n\n\n\n// WEBPACK FOOTER //\n// src/js/app/state/Filter.jsx","import React from 'react'\nimport { connect } from 'react-redux'\n\nimport { memoize } from 'memo'\nimport { changeFulltext, getFilterSetting } from 'filters'\n\nimport Stat from 'Stat'\n\nconst handleChange = memoize((handle, table, filterId) => event => handle(table, filterId, event.target.value))\n\nconst Fulltext = ({\n  table,\n  filterId, filterField, filterLabel,\n  filterSetting,\n  filteredAmount, filteredAmountOthers,\n  handle,\n}) => (\n  <div>\n    <p title={`Search in ${filterField}`} >\n      <input\n        type=\"text\"\n        className=\"search\"\n        placeholder={`search in ${filterLabel}`}\n        value={filterSetting}\n        onChange={handleChange(handle, table, filterId)}\n      />{' '}\n      <Stat subTotal={filteredAmount} total={filteredAmountOthers} />\n    </p>\n  </div>\n)\n\nexport default connect(getFilterSetting, { handle: changeFulltext })(Fulltext)\n\n\n\n// WEBPACK FOOTER //\n// src/js/app/state/Fulltext.jsx","import React from 'react'\nimport { connect } from 'react-redux'\nimport { reduxForm } from 'redux-form'\n\nimport { memoize } from 'memo'\n\nimport { getTables, modItem } from 'tables'\n\nimport FieldRead from 'FieldRead'\nimport FieldEdit from 'FieldEdit'\n\nconst toDb = memoize((table, eId, mod) => values => mod(table, eId, values))\n\nconst makeFields = ({ tables, table, fields, perm, ...props }) => {\n  const { initialValues } = props\n  const { [table]: { fieldSpecs, fieldOrder } } = tables\n\n  const fragments = []\n  let hasEditable = false\n  for (const field of fieldOrder) {\n    const { [field]: f } = fields\n    if (f == null) {continue}\n    const { [field]: { label } } = fieldSpecs\n    const { update: { [field]: editable } } = perm\n    const { [field]: myValues } = initialValues\n    if (editable) {hasEditable = true}\n    const theField = (editable) ?\n      <FieldEdit\n        field={field}\n        table={table}\n        {...props}\n      /> :\n      <FieldRead\n        field={field}\n        table={table}\n        myValues={myValues}\n      />\n    fragments.push({ field, label, fragment: theField })\n  }\n  return { fragments, hasEditable }\n}\n\nconst ItemForm = props => {\n  const { table, eId, mod, dirty, invalid, error, submitting, reset, handleSubmit } = props\n  const { fragments, hasEditable } = makeFields(props)\n  return (\n    <form onSubmit={handleSubmit(toDb(table, eId, mod))} >\n      {hasEditable ? (\n        <div>\n          <p>\n            {\n              (dirty && !invalid && !submitting) ? (\n                <button type=\"submit\" className={'button-large edit-action'} >{'Save'}</button>\n              ) : null\n            }\n            {' '}\n            {\n              (dirty && !submitting) ? (\n                <button type=\"button\" className={'button-large'} onClick={reset} >{'Reset'}</button>\n              ) : null\n            }\n            {' '}\n            {\n              (!dirty && !submitting) ? (\n                <span className=\"good\" >{'no changes'}</span>\n              ) : null\n            }\n            {' '}\n            {\n              (submitting) ? (\n                <span className=\"special\" >{'saving ...'}</span>\n              ) : null\n            }\n          </p>\n          {error && <p className=\"invalid diag\">{error}</p>}\n        </div>\n        ) : null\n      }\n      <table className=\"fragments\">\n        <tbody>{\n        fragments.map(({ field, label, fragment }) => (\n          <tr key={field} >\n            <th><label>{`${label}:`}</label></th>\n            <td>{fragment}</td>\n          </tr>\n        ))\n      }\n        </tbody>\n      </table>\n    </form>\n  )\n}\n\n/* Workaround (6.6.3) for issue https://github.com/erikras/redux-form/issues/2841\n * We do a mostly unnecessary reset() after a successful submit.\n * There is bug in redux-form: if you remove a field from a field array, a spurious\n * empty field will be present after a submit.\n * This reset removes that field.\n *\n * Still needed in 6.7.0\n */\nconst onSubmitSuccess = (result, dispatch, { reset }) => {\n  reset()\n}\n\nexport default connect(getTables, { mod: modItem })(reduxForm({\n  destroyOnUnmount: false,\n  enableReinitialize: true,\n  keepDirtyOnReinitialize: true,\n  onSubmitSuccess,\n})(ItemForm))\n\n\n\n\n\n\n// WEBPACK FOOTER //\n// src/js/app/state/ItemForm.jsx","import React from 'react'\nimport { connect } from 'react-redux'\n\nimport { getTables } from 'tables'\n\nimport ItemHead from 'ItemHead'\n\nconst ItemList = ({ tables, table, title, filteredData, inplace, base, verb }) => {\n  const { [table]: { entities } } = tables\n  return (\n    <div>\n      <table>\n        <tbody>{\n        filteredData.map(eId => {\n          const { [eId]: { values } } = entities\n          return (\n            <ItemHead key={eId} table={table} title={title} values={values} inplace={inplace} base={base} verb={verb} />\n          )\n        })\n        }</tbody>\n      </table>\n    </div>\n  )\n}\n\nexport default connect(getTables)(ItemList)\n\n\n\n// WEBPACK FOOTER //\n// src/js/app/state/ItemList.jsx","import React from 'react'\nimport { connect } from 'react-redux'\n\nimport { getWinDim, columnStyle } from 'win'\n\nconst Pane = ({ format, position, children, height, width }) => (\n  <div\n    className={format}\n    style={columnStyle(position, { height, width })}\n  >\n    {children}\n  </div>\n)\n\nexport default connect(getWinDim)(Pane)\n\n\n\n// WEBPACK FOOTER //\n// src/js/app/state/Pane.jsx","import React from 'react'\nimport { connect } from 'react-redux'\nimport { combineSelectors } from 'utils'\nimport { memoize } from 'memo.js'\n\nimport { getSelect, setSearch, setPopUp, togglePopUp } from 'select'\nimport { getOptions } from 'tables'\n\nconst RelOption = ({ label, selected, onHit }) => (\n  <p\n    className={`option tag ${selected ? 'selected' : ''}`}\n    onClick={selected ? null : onHit}\n  >{label}</p>\n)\n\nconst handlePopUp = memoize((tag, togglePU) => () => togglePU(tag))\nconst handleSetPopUp = memoize((tag, onOff, setPU) => () => setPU(tag, onOff))\nconst handleSearch = memoize((tag, setS) => event => setS(tag, event.target.value))\nconst handleClear = memoize((tag, setS) => () => setS(tag, ''))\n\nconst removeVal = (value, onChange, val) => event => {\n  event.stopPropagation()\n  if (value.includes(val)) {\n    const newValue = value.filter(v => v != val)\n    onChange(newValue)\n  }\n}\nconst addVal = (optionLookup, multiple, value, onChange, label) => () => {\n  const { [label]: rep } = optionLookup\n  const exists = rep != null || value.includes(label)\n  if (!exists) {\n    const newValue = multiple ? [label, ...value] : label\n    onChange(newValue)\n  }\n}\nconst changeSel = (tag, multiple, value, onChange, setPU, val) => () => {\n  if (multiple) {\n    if (!value.includes(val)) {\n      const newValue = [...value, val]\n      onChange(newValue)\n    }\n  }\n  else {\n    onChange(val)\n    setPU(tag, false)\n  }\n}\n\nconst Tags = ({ tag, optionLookup, value, onChange, togglePU }) => (\n  <div\n    className=\"tags\"\n    onClick={handlePopUp(tag, togglePU)}\n  >{\n    (value != null && value.length) ?\n      value.map(val => {\n        const { [val]: lab = val } = optionLookup\n        return (\n          <span\n            key={val}\n            className=\"tag\"\n          >\n            <span\n              className=\"button-tag\"\n              onClick={removeVal(value, onChange, val)}\n            >{'×'}</span>{' '}\n            <span>{lab}</span>\n          </span>\n        )\n      }) :\n      <span className=\"tag empty\">{'click to enter values'}</span>\n  }\n  </div>\n)\n\nconst Head = ({ optionLookup, value, tag, togglePU }) => {\n  let label = ''\n  let classes = 'option-head tag'\n  const { [value]: lab = value } = optionLookup\n  label = lab\n  if (value == '') {\n    label = 'click to enter a value'\n    classes += ' new'\n  }\n  return (\n    <span\n      className={classes}\n      onClick={handlePopUp(tag, togglePU)}\n    >{label}</span>\n  )\n}\n\nconst Typing = ({ tag, search, setS, setPU }) => (\n  <span className=\"option-type\" >\n    <input\n      className=\"invisible\"\n      type=\"text\"\n      placeholder={'filter ...'}\n      value={search || ''}\n      onFocus={handleSetPopUp(tag, true, setPU)}\n      onChange={handleSearch(tag, setS)}\n    />\n    {search ?\n      <span\n        className=\"button-tag\"\n        onClick={handleClear(tag, setS)}\n      >{'×'}</span> : null\n    }\n  </span>\n)\n\nconst Options = ({ tag, optionLookup, multiple, allowNew, options, value, onChange, search, setPU }) => {\n  const pat = search.toLowerCase()\n  return (\n    <div className=\"options\" >\n      {(\n        allowNew &&\n        search &&\n        !options.some(({ label }) => label == search) &&\n        !value.includes(search)\n      ) ? (\n        <span\n          className=\"new tag\"\n          onClick={addVal(optionLookup, multiple, value, onChange, search)}\n        >{search}</span>\n      ) : null}\n      {\n        options.map(({ value: val, label: lab }) => (\n          (!multiple || !value.includes(val)) &&\n          (pat == null || pat == '' || lab == null || lab.toLowerCase().indexOf(pat) !== -1)\n        ) ? (\n          <RelOption\n            key={val}\n            label={lab}\n            selected={(multiple && value.includes(val)) || (!multiple && value == val)}\n            onHit={changeSel(tag, multiple, value, onChange, setPU, val)}\n          />\n        ) : null)\n      }\n    </div>\n  )\n}\n\nconst RelSelect = ({\n  tag, options, optionLookup,\n  input: { value, onChange },\n  multiple, allowNew, popUp, search, togglePU, setPU, setS,\n}) => (\n  <div\n    className={`select ${multiple ? 'multiselect' : ''}`}\n  >\n    {multiple ?\n      <Tags\n        optionLookup={optionLookup}\n        value={value}\n        tag={tag}\n        togglePU={togglePU}\n        onChange={onChange}\n      /> :\n      <Head\n        optionLookup={optionLookup}\n        value={value}\n        popUp={popUp}\n        tag={tag}\n        togglePU={togglePU}\n      />\n    }\n    {popUp ?\n      <Typing\n        tag={tag}\n        search={search}\n        setS={setS}\n        setPU={setPU}\n      /> : null\n    }\n    {popUp ?\n      <Options\n        tag={tag}\n        optionLookup={optionLookup}\n        options={options}\n        multiple={multiple}\n        allowNew={allowNew}\n        value={value}\n        search={search}\n        setPU={setPU}\n        onChange={onChange}\n      /> : null\n    }\n  </div>\n)\n\nconst getSelectOptions = combineSelectors(getOptions, getSelect)\n\nexport default connect(getSelectOptions, { setPU: setPopUp, togglePU: togglePopUp, setS: setSearch})(RelSelect)\n\n\n\n// WEBPACK FOOTER //\n// src/js/app/state/RelSelect.jsx","import React from 'react'\n\nimport { withParams } from 'utils'\n\nimport NavLink from 'NavLink'\nimport Pane from 'Pane'\n\nconst SubApp = ({ table, children }) => (\n  <div>\n    <Pane format=\"nav sized\" position=\"left\">\n      <div>\n        <p><NavLink to={`/data/${table}/list`} >{'All items'}</NavLink></p>\n        <p><NavLink to={`/data/${table}/mylist`} >{'My work'}</NavLink></p>\n      </div>\n    </Pane>\n    <Pane format=\"sized\" position=\"right\">\n      { children }\n    </Pane>\n  </div>\n)\n\nexport default withParams(SubApp)\n\n\n\n// WEBPACK FOOTER //\n// src/js/app/state/SubApp.jsx"],"mappings":";;;;;;AAAA;;;;;;;;ACAA;;;;;;;;ACAA;;;;;;;;ACAA;;;;;;;;ACAA;;;;;;;;ACAA;;;;;;;;ACAA;;;;;;;;ACAA;;;;;;;;ACgDA;;;;;;;;AChDA;;;;;;;;ACAA;;;;;;;;ACAA;;;;;;;;ACAA;;;;;;;;ACAA;;;;;;;;ACAA;;;;;;;;ACAA;;;;;;;;ACAA;;;;;;;;ACAA;;;;;;;;ACAA;;;;;;;;ACAA;;;;;;;;ACAA;;;;;;;;ACAA;;;;;;;;ACAA;;;;;;;;ACAA;;;;;;;;ACAA;;;;;;;;ACAA;;;;;;;;ACAA;;;;;;;;ACAA;;;;;;;;ACAA;;;;;;;;ACAA;;;;;;;;ACAA;;;;;;;;ACAA;;;;;;;;ACAA;;;;;;;;ACAA;;;;;;;;ACAA;;;;;;;;ACAA;;;;;;;;ACAA;;;;;;;;ACAA;;;;;;;;ACAA;;;;;;;;ACAA;;;;;;;;ACAA;;;;;;;;ACAA;;;;;;;;ACAA;;;;;;;;ACAA;;;;;;;;ACAA;;;;;;;;ACAA;;;;A","sourceRoot":""}