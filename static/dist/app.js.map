{"version":3,"file":"app.js","sources":["webpack:///src/js/app/dux/alter.js","webpack:///src/js/app/dux/configureStore.js","webpack:///src/js/app/dux/doc.js","webpack:///src/js/app/dux/filter.js","webpack:///src/js/app/dux/helpers.js","webpack:///src/js/app/dux/me.js","webpack:///src/js/app/dux/notify.js","webpack:///src/js/app/dux/rootReducer.js","webpack:///src/js/app/dux/server.js","webpack:///src/js/app/dux/tables.js","webpack:///src/js/app/dux/win.js","webpack:///src/js/app/main.jsx","webpack:///src/js/app/object/CheckboxI.jsx","webpack:///src/js/app/object/DocMd.jsx","webpack:///src/js/app/object/EUMap.jsx","webpack:///src/js/app/object/FilterCompute.jsx","webpack:///src/js/app/object/ItemFiltered.jsx","webpack:///src/js/app/object/ItemMy.jsx","webpack:///src/js/app/object/ItemRecord.jsx","webpack:///src/js/app/object/Login.jsx","webpack:///src/js/app/object/Notification.jsx","webpack:///src/js/app/object/Window.jsx","webpack:///src/js/app/pure/Backoffice.jsx","webpack:///src/js/app/pure/Doc.jsx","webpack:///src/js/app/pure/DocHtml.jsx","webpack:///src/js/app/pure/DocPdf.jsx","webpack:///src/js/app/pure/ItemHead.jsx","webpack:///src/js/app/pure/ItemRecordPre.jsx","webpack:///src/js/app/pure/NavLink.jsx","webpack:///src/js/app/pure/NotFound.jsx","webpack:///src/js/app/pure/Root.jsx","webpack:///src/js/app/pure/Stat.jsx","webpack:///src/js/app/pure/Static.jsx","webpack:///src/js/app/state/Alternative.jsx","webpack:///src/js/app/state/App.jsx","webpack:///src/js/app/state/ByValue.jsx","webpack:///src/js/app/state/Facet.jsx","webpack:///src/js/app/state/Filter.jsx","webpack:///src/js/app/state/FullText.jsx","webpack:///src/js/app/state/ItemField.jsx","webpack:///src/js/app/state/ItemList.jsx","webpack:///src/js/app/state/Pane.jsx","webpack:///src/js/app/state/SubApp.jsx"],"sourcesContent":["import merge from 'lodash/merge'\n\n/* ACTIONS */\n\nexport const nextAlt = (tag, nAlts, initial) => ({ type: 'nextAlt', tag, nAlts, initial })\n\n/* REDUCER */\n\nexport default (state = {}, { type, tag, initial, nAlts }) => {\n  switch (type) {\n    case 'nextAlt': {\n      const { [tag]: oldAlt = (initial || 0) } = state\n      const newAlt = (oldAlt + 1) % nAlts\n      return merge({}, state, { [tag]: newAlt })\n    }\n    default: return state\n  }\n}\n\n/* SELECTORS */\n\nexport const getAlt = ({ alter }, { tag, initial }) => {\n  const { [tag]: alt = initial || 0 } = alter\n  return { alt }\n}\n\n/* HELPERS */\n\n\n\n\n// WEBPACK FOOTER //\n// src/js/app/dux/alter.js","import { createStore, applyMiddleware } from 'redux'\nimport thunkMiddleware from 'redux-thunk'\n\n/* global process */\n/* global require */\n\nconst configureStore = reducer => {\n  const middlewares = [thunkMiddleware]\n  const storeComponents = [reducer]\n  if (process.env.NODE_ENV === `development`) {\n    const { createLogger } = require(`redux-logger`)\n    middlewares.push(createLogger())\n    storeComponents.push(\n      window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__(),\n    )\n  }\n  storeComponents.push(\n    applyMiddleware(...middlewares),\n  )\n\n  const store = createStore(\n    ...storeComponents\n  )\n  return store\n}\n\nexport default configureStore\n\n\n\n// WEBPACK FOOTER //\n// src/js/app/dux/configureStore.js","import merge from 'lodash/merge'\n\nimport { fetchData } from 'server.js'\nimport { propsChanged } from 'helpers.js'\n\n/* ACTIONS */\n/*\n * Most actions call fetchData, which will dispatch the ultimate fetch action.\n */\n\nexport const fetchDoc = props => {\n  const { docDir, docName, docExt } = props\n  const path = `${docDir}/${docName}.${docExt}`\n  return fetchData({ type: 'fetchDoc', contentType: 'json', path, desc: `document ${docName}` })\n}\n\n/* REDUCER */\n\nexport default (state = {}, { type, path, data }) => {\n  switch (type) {\n    case 'fetchDoc': {\n      if (data == null) {return state}\n      return merge({}, state, { [path]: data })\n    }\n    default: return state\n  }\n}\n\n/* SELECTORS */\n\nexport const getDoc = ({ doc }, { docDir, docName, docExt }) => ({\n  text: doc[`${docDir}/${docName}.${docExt}`],\n})\n\n/* HELPERS */\n\nexport const needDoc = props => (props.text == null)\n\nexport const changedDoc = (newProps, oldProps) => (\n  propsChanged(newProps, needDoc, oldProps, ['docDir', 'docName', 'docExt'])\n)\n\n\n\n\n// WEBPACK FOOTER //\n// src/js/app/dux/doc.js","import merge from 'lodash/merge'\n\nimport { memoBind } from 'helpers.js'\nimport { repRelated } from 'tables.js'\n\n/* ACTIONS */\n\nexport const changeFulltext = (table, filterId, searchString) => ({ type: 'fulltext', table, filterId, data: searchString })\nexport const changeFacet = (table, filterId, valueId, onOff) => ({ type: 'facet', table, filterId, data: [valueId, onOff] })\nexport const changeFacetAll = (table, filterId, onOff) => ({ type: 'facetAll', table, filterId, data: onOff })\n\nexport const setupFiltering = (tables, table) => dispatch => {\n  const fieldValues = memoBind(fCC, 'compileFiltering', [table], [tables, table])\n  const filterSettings = memoBind(fCC, 'initFiltering', [table], [tables, table, fieldValues])\n  dispatch({ type: 'setupFiltering', table, filterSettings })\n}\n\n/* REDUCER */\n\nexport default (state = {}, { type, table, filterId, data, filterSettings }) => {\n  switch (type) {\n    case 'setupFiltering': {\n      return merge({}, state, { [table]: { filterSettings, initialized: true } })\n    }\n    case 'fulltext': {\n      return merge({}, state, { [table]: { filterSettings: { [filterId]: data } } })\n    }\n    case 'facetAll': {\n      const { [table]: { filterSettings: { [filterId]: facets } } } = state\n      const sameSettings = {}\n      Object.keys(facets).forEach(valueId => {sameSettings[valueId] = data})\n      return merge({}, state, { [table]: { filterSettings: { [filterId]: sameSettings } } })\n    }\n    case 'facet': {\n      const [valueId, filterSetting] = data\n      return merge({}, state, { [table]: { filterSettings: { [filterId]: { [valueId]: filterSetting } } } })\n    }\n    default: return state\n  }\n}\n\n/* SELECTORS */\n\nexport const getFilterSetting = ({ filter }, { table, filterId }) => ({\n  filterSetting: filter[table].filterSettings[filterId],\n})\n\nexport const getFieldValues = ({ tables }, { table, filterField }) => ({\n  fieldValues: memoBind(fCC, 'compileFiltering', [table], [tables, table])[filterField],\n})\n\nexport const getFiltersApplied = ({ tables, filter }, { table }) => {\n  const { [table]: filterStatus = { filterSettings: {}, initialized: false } } = filter\n  const { filterSettings, initialized } = filterStatus\n  const fieldValues = memoBind(fCC, 'compileFiltering', [table], [tables, table])\n  if (initialized) {\n    return {\n      tables,\n      initialized,\n      fieldValues,\n      filterSettings,\n      ...computeFiltering(tables, table, fieldValues, filterSettings),\n    }\n  }\n  else {\n    return {\n      tables,\n      initialized,\n      fieldValues,\n    }\n  }\n}\n\n/* HELPERS */\n\nclass FilterCompileCache {\n  compileFiltering = (tables, table) => {\n    const { [table]: { valueLists, fields, filterList, fieldSpecs } } = tables\n    const presentFilterList = filterList.filter(x => fields[x.field])\n    const filterFields = presentFilterList.filter(x => x.type !== 'FullText').map(x => x.field)\n    const fieldValues = {}\n    for (const field of filterFields) {\n      const { [field]: { valType } } = fieldSpecs\n      const { [field]: vals } = valueLists\n      const fFieldValues = {'': '-none-'}\n      const orderedVals = Object.keys(vals).sort()\n      if (typeof valType == 'string') {\n        orderedVals.forEach((v, i) => {fFieldValues[i] = v})\n      }\n      else {\n        const { values: rel } = valType\n        orderedVals.forEach(v => {\n          fFieldValues[v] = repRelated(tables, rel, v)\n        })\n      }\n      fieldValues[field] = fFieldValues\n    }\n    return fieldValues\n  }\n  initFiltering = (tables, table, fieldValues) => {\n    const { [table]: { fields, filterList } } = tables\n    const presentFilterList = filterList.filter(x => fields[x.field])\n    const filterSettings = {}\n    presentFilterList.forEach((filterSpec, filterId) => {\n      if (filterSpec.type == 'FullText') {\n        filterSettings[filterId] = ''\n      }\n      else {\n        const facets = {}\n        Object.keys(fieldValues[filterSpec.field]).forEach(valueId => {facets[valueId] = true})\n        filterSettings[filterId] = facets\n      }\n    })\n    return filterSettings\n  }\n}\nconst fCC = new FilterCompileCache()\n\n\nconst computeFiltering = (tables, table, fieldValues, filterSettings) => {\n  const { [table]: { entities, order, fields, fieldSpecs, filterList } } = tables\n  const presentFilterList = filterList.filter(x => fields[x.field])\n  const filterChecks = {}\n  const otherFilteredData = {}\n\n  const makeFilterCheck = (filterSpec, filterId) => {\n    const { field } = filterSpec\n    const { [filterId]: filterSetting } = filterSettings\n    const { [field]: fieldSpec } = fieldSpecs\n    return (\n      filterSpec.type === 'FullText' ?\n          fulltextCheck :\n          facetCheck\n      )(tables, field, fieldSpec, filterSetting)\n  }\n\n  presentFilterList.forEach((filterSpec, filterId) => {\n    filterChecks[filterId] = makeFilterCheck(filterSpec, filterId)\n    otherFilteredData[filterId] = []\n  })\n  const filteredData = []\n\n  for (const eId of order) {\n    const { [eId]: entity } = entities\n    let theOneFail = null\n    let v = true\n    let discard = false\n    Object.entries(filterChecks).forEach(([filterId, filterCheck]) => {\n      if (!discard) {\n        const pass = filterCheck(entity)\n        if (!pass) {\n          v = false\n          if (theOneFail === null) {theOneFail = filterId}\n          else {discard = true}\n        }\n      }\n    })\n    if (!discard) {\n      const { values: { _id } } = entity\n      if (v) {\n        filteredData.push(_id)\n        presentFilterList.forEach((filterSpec, filterId) => {\n          otherFilteredData[filterId].push(_id)\n        })\n      }\n      else {otherFilteredData[theOneFail].push(_id)}\n    }\n  }\n  const amounts = {}\n  presentFilterList.forEach(({ field, type }, filterId) => {\n    const { [field]: fieldSpec } = fieldSpecs\n    amounts[filterId] = type === 'FullText' ? null : countFacets(\n      tables, field, fieldSpec, fieldValues[field], otherFilteredData[filterId], entities\n    )\n  })\n  const filteredAmountOthers = {}\n  Object.entries(otherFilteredData).forEach(([filterId, x]) => {\n    filteredAmountOthers[filterId] = x.length\n  })\n  return {\n    filteredData,\n    filteredAmountOthers,\n    amounts,\n  }\n}\n\nconst getUnpack = (tables, fieldSpec, asString = false) => {\n  const { valType, multiple } = fieldSpec\n  let unpack\n  if (typeof valType == 'string') {\n    unpack = multiple ? (\n      asString ? (\n        v => (v == null) ? '' : v.join(' ')\n      ) : (\n        v => (v == null) ? [] : v\n      )\n    ) : (\n      asString ? (\n        v => (v == null) ? '' : v\n      ) : (\n        v => (v == null) ? [] : [v]\n      )\n    )\n  }\n  else {\n    const { values: rel } = valType\n    unpack = multiple ? (\n      asString ? (\n        v => (v == null) ? '' : v.map(v => repRelated(tables, rel, v).join(' '))\n      ) : (\n        v => (v == null) ? [] : v\n      )\n    ) : (\n      asString ? (\n        v => (v == null) ? '' : repRelated(tables, rel, v)\n      ) : (\n        v => (v == null) ? [] : [v]\n      )\n    )\n  }\n  return unpack\n}\n\nconst fulltextCheck = (tables, field, fieldSpec, term) => {\n  const unpack = getUnpack(tables, fieldSpec, true)\n  const search = term.toLowerCase()\n  if (search == null || search == '') {\n    return () => true\n  }\n  return entity => {\n    const { values: { [field]: val } } = entity\n    const rep = unpack(val)\n    return rep != null && rep.toLowerCase().indexOf(search) !== -1\n  }\n}\n\nconst facetCheck = (tables, field, fieldSpec, facetSettings) => {\n  const unpack = getUnpack(tables, fieldSpec)\n  if (facetSettings.size === 0) {\n    return () => false\n  }\n  return entity => {\n    const { values: { [field]: val } } = entity\n    const rep = unpack(val)\n    if (rep.length == 0) {\n      return facetSettings['']\n    }\n    for (const r of rep) {\n      if (facetSettings[r]) {\n        return true\n      }\n    }\n    return false\n  }\n}\n\nconst countFacets = (tables, field, fieldSpec, fieldValues, filteredData, entities) => {\n  const unpack = getUnpack(tables, fieldSpec)\n  const facetAmounts = {}\n  Object.keys(fieldValues).forEach(r => {facetAmounts[r] = 0})\n  for (const eId of filteredData) {\n    const { [eId]: { values: { [field]: val } } } = entities\n    const rep = unpack(val)\n    if (rep.length == 0) {\n      facetAmounts[''] += 1\n    }\n    else {\n      for (const r of rep) {\n        facetAmounts[r] += 1\n      }\n    }\n  }\n  return facetAmounts\n}\n\nexport const placeFacets = (fieldValues, maxCols) => {\n  if (fieldValues == null) {return []}\n  const facets = Object.entries(fieldValues).sort((x, y) => x[1].localeCompare(y[1]))\n  if (facets.length == 0) {return []}\n  const rows = []\n  const { length: lf } = facets\n  const nrows = Math.floor(lf / maxCols) + ((lf % maxCols) ? 1 : 0)\n  const ncols = Math.floor(lf / nrows) + ((lf % nrows) ? 1 : 0)\n  for (let r = 0; r < nrows; r++) {\n    const row = []\n    for (let c = 0; c < ncols; c++) {\n      const f = nrows * c + r\n      row.push((f < lf) ? facets[f] : null)\n    }\n    rows.push(row)\n  }\n  return rows\n}\n\nexport const testAllChecks = filterSettings => {\n  let allTrue = true\n  let allFalse = true\n  for (const valueEntry of Object.entries(filterSettings)) {\n    if (valueEntry[1]) {allFalse = false}\n    else {allTrue = false}\n  }\n  return { allTrue, allFalse }\n}\n\n\n\n\n// WEBPACK FOOTER //\n// src/js/app/dux/filter.js","export function memoBind(thisArg, funcName, keyArgs, allArgs) {\n  if (typeof thisArg !== 'object' || !thisArg) {\n    throw new TypeError('Invalid thisArg parameter.')\n  }\n\n  const { [funcName]: func } = thisArg\n  if (typeof func !== 'function') {\n    throw new TypeError(`'${funcName}' is not a function.`)\n  }\n\n  if (thisArg._memCache == null) {thisArg._memCache = {}}\n  if (thisArg._memCache[funcName] == null) {\n    thisArg._memCache[funcName] = {}\n  }\n  const { _memCache: { [funcName]: cache } } = thisArg\n\n  const memoKey = JSON.stringify(keyArgs)\n  if (cache[memoKey] == null) {\n    cache[memoKey] = func.apply(thisArg, allArgs)\n  }\n  return cache[memoKey]\n}\n\nexport const propsChanged = (newProps, need, oldProps, keyPropNames) => {\n  let result = false\n  if (oldProps == null) {\n    if (need(newProps)) {result = true}\n  }\n  else {\n    if (keyPropNames.some(a => newProps[a] != oldProps[a]) && need(newProps)) {result = true}\n  }\n  return result\n}\n\nexport const combineSelectors = function(...selectors) {\n  return (state, props) => {\n    const result = {}\n    for (const selector of selectors) {\n      Object.assign(result, selector(state, props))\n    }\n    return result\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// src/js/app/dux/helpers.js","import { fetchData } from 'server.js'\n\n/* ACTIONS */\n/*\n * Most actions call fetchData, which will dispatch the ultimate fetch action.\n */\nexport const fetchMe = () => (\n  fetchData({ type: 'fetchMe', contentType: 'db', path: '/who/ami', desc: 'me' })\n)\n\n/* REDUCER */\n\nexport default (state = {}, { type, data }) => {\n  switch (type) {\n    case 'fetchMe': {\n      if (data == null) {return {}}\n      return { ...data }\n    }\n    default: return state\n  }\n}\n\n/* SELECTORS */\n\nexport const getMe = ({ me }) => ({ me })\n\n/* HELPERS */\n\n\n\n\n// WEBPACK FOOTER //\n// src/js/app/dux/me.js","import mergeWith from 'lodash/mergewith'\n\n/* ACTIONS */\n\nexport const ask = desc => ({ type: 'async', status: 'pending', desc })\nexport const err = (desc, msgs) => ({ type: 'async', status: 'error', desc, msgs })\nexport const succeed = desc => ({ type: 'async', status: 'success', desc })\n\nexport const notify = msgs => ({ type: 'msgs', msgs })\nexport const clear = () => ({ type: 'clear' })\nexport const display = onOff => ({ type: 'display', onOff })\n\n/* REDUCER */\n\nexport default (state = { items: [], busy: 0, show: false }, { type, desc, status, msgs, onOff }) => {\n  switch (type) {\n    case 'async': {\n      const { busy } = state\n      const extraMsgs = msgs || []\n      switch (status) {\n        case 'pending': {\n          return mergeWith({}, state, {\n            items: [\n              ...extraMsgs,\n              { kind: 'special', text: `waiting for ${desc}`},\n            ],\n            busy: busy + 1,\n          }, addItems)\n        }\n        case 'success': {\n          return mergeWith({}, state, {\n            items: [\n              ...extraMsgs,\n              { kind: 'info', text: `${desc} ok` },\n            ],\n            busy: busy - 1,\n          }, addItems)\n        }\n\n        case 'error': {\n          return mergeWith({}, state, {\n            items: [\n              ...extraMsgs,\n              { kind: 'error', text: `${desc} failed` },\n            ],\n            busy: busy - 1,\n            show: true,\n          }, addItems)\n        }\n        default: return state\n      }\n    }\n    case 'msgs': {\n      return mergeWith({}, state, {\n        items: [\n          ...msgs,\n        ],\n        show: true,\n      }, addItems)\n    }\n    case 'clear': {\n      return {\n        ...state,\n        items: [],\n        show: false,\n      }\n    }\n    case 'display': {\n      return {\n        ...state,\n        show: onOff,\n      }\n    }\n    default: return state\n  }\n}\n\n/* SELECTORS */\n\nexport const getNotifications = ({ notify }) => {\n  const { items, busy, show } = notify\n  let lastNote = -1\n  let lastKind = ''\n  items.forEach((item, i) => {\n    const { kind } = item\n    if (kind == 'error') {\n      lastNote = i\n      lastKind = 'error'\n    }\n    else if (kind == 'warning') {\n      if (lastKind != 'error') {\n        lastNote = i\n        lastKind = 'warning'\n      }\n    }\n  })\n  return { notifications: items, busy, show, lastMsg: items.length - 1, lastNote, lastKind }\n}\n\n/* HELPERS */\n\nconst addItems = (objValue, srcValue, key) => {\n  if (key == 'items') {\n    return (objValue == null) ? srcValue : objValue.concat(srcValue)\n  }\n}\n\n\n\n\n// WEBPACK FOOTER //\n// src/js/app/dux/notify.js","import { combineReducers } from 'redux'\n\nimport win from 'win.js'\nimport notify from 'notify.js'\nimport doc from 'doc.js'\nimport tables from 'tables.js'\nimport me from 'me.js'\nimport filter from 'filter.js'\nimport alter from 'alter.js'\n\n/* ACTIONS */\n\n/* ROOT REDUCER */\n\nexport default combineReducers({\n  win,\n  notify,\n  doc,\n  tables,\n  me,\n  filter,\n  alter,\n})\n\n\n\n\n// WEBPACK FOOTER //\n// src/js/app/dux/rootReducer.js","import 'whatwg-fetch'\n\nimport { ask, err, succeed } from 'notify.js'\n\nconst rootUrl = '/api/'\n\n/* ACTIONS */\n/*\n * Generic action to fetch data from the server.\n * The query is configured by the task object.\n * It can be used for database queries or file content.\n * During request, notify actions will be dispatched.\n */\n\nexport const fetchData = task => dispatch => {\n  const { path, contentType, desc } = task\n  dispatch(ask(desc))\n  dispatch({ ...task, data: null })\n\n  const settings = {credentials: 'same-origin'}\n  fetch(`${rootUrl}${contentType}${path}`, settings)\n  .then(response => response.json())\n  .then(json => {\n    const { msgs, good, data } = json\n    if (good) {\n      dispatch(succeed(desc))\n      dispatch({ ...task, data })\n    }\n    else {\n      dispatch(err(desc, msgs))\n    }\n  })\n  .catch(error => {\n    dispatch(err(desc, [{kind: 'error', text: error.toString()}]))\n  })\n}\n\n/* REDUCER */\n/*\n * no dedicated reducer.\n * Results of actions will be reduced by dedicated reducers.\n */\n\n/* SELECTORS */\n/*\n * no dedicated selectors.\n * See the selectors corresponding to the dedicated reducers.\n */\n\n/* HELPERS */\n\n\n\n\n// WEBPACK FOOTER //\n// src/js/app/dux/server.js","import mergeWith from 'lodash/mergewith'\n\nimport { fetchData } from 'server.js'\nimport { propsChanged } from 'helpers.js'\n\n/* ACTIONS */\n/*\n * Most actions call fetchData, which will dispatch the ultimate fetch action.\n */\n\nexport const fetchTable = table => (\n  fetchData({ type: 'fetchTable', contentType: 'db', path: `/list?table=${table}`, desc: `${table} table`, table })\n)\nexport const fetchTableMy = table => (\n  fetchData({ type: 'fetchTableMy', contentType: 'db', path: `/my?table=${table}`, desc: `${table} table (my records)`, table })\n)\nexport const fetchItem = props => {\n  const { table, eId, ownOnly } = props\n  return fetchData({\n    type: 'fetchItem',\n    contentType: 'db',\n    path: `/view?table=${table}&id=${eId}${ownOnly ? '&own=true' : ''}`,\n    desc: `${table} record ${eId}`,\n    table,\n  })\n}\n\n/* REDUCER */\n\nexport default (state = {}, { type, data, table }) => {\n  switch (type) {\n    case 'fetchTable': {\n      if (data == null) {return state}\n      return mergeWith({}, state, data, setComplete)\n    }\n    case 'fetchTableMy': {\n      if (data == null) {return state}\n      return mergeWith({}, state, data, setComplete)\n    }\n    case 'fetchItem': {\n      if (data == null) {return state}\n      const { values: { _id } } = data\n      return mergeWith({}, state, { [table]: { entities: { [_id]: data } } }, setComplete)\n    }\n    default: return state\n  }\n}\n\n/* SELECTORS */\n\nexport const getTables = ({ tables }) => ({ tables })\n\nexport const getTableFilters = ({ tables }, { table }) => {\n  const { [table]: { fields, filterList } } = tables\n  return { fields, filterList }\n}\n\n/* HELPERS */\n\nconst setComplete = (newValue, oldValue, key) => {\n  if (key == 'complete') {return newValue || oldValue}\n}\n\nexport const needTables = (tables, tableNames, my = false) => {\n  if (tables == null) {return true}\n  const tNames = (!Array.isArray(tableNames)) ? [tableNames] : tableNames\n  return tNames.some(table => (\n    tables[table] == null ||\n    (my && tables[table].my == null) ||\n    (!my && tables[table].order == null)\n  ))\n}\n\nexport const needValues = ({ tables, table, eId }) => (\n  tables == null || tables[table] == null || tables[table].entities[eId] == null || !tables[table].entities[eId].complete\n)\n\nexport const changedItem = (newProps, oldProps) => (\n  propsChanged(newProps, needValues, oldProps, ['table', 'eId'])\n)\n\nconst repUser = ({ user }, valId) => {\n  let valRep\n  const { entities: { [valId]: entity } } = user\n  if (entity) {\n    const { values: { eppn, firstName, lastName, emailPre, authority, mayLogin } } = entity\n    const email = emailPre || ''\n    let linkText = [firstName || '', lastName || ''].filter(x => x).join(' ')\n    if (linkText == '') {linkText = email}\n    const namePart = (linkText && email) ? (\n      `[${linkText}](mailto:${email})`\n    ) : (\n      linkText + email\n    )\n    const eppnPart = eppn ? ` eppn=${eppn} ` : ''\n    const authorityPart = authority ? ` authenticated by=${authority} ` : ''\n    const mayLoginPart = mayLogin ? ` active=${mayLogin} ` : ''\n    valRep = [namePart, eppnPart, authorityPart, mayLoginPart].filter(x => x).join('; ')\n  }\n  else {valRep = 'UNKNOWN'}\n  return valRep\n}\n\nconst repCountry = ({ country }, valId) => {\n  const { entities: { [valId]: entity } } = country\n  if (entity) {\n    const { values: { name, iso } } = entity\n    return `${iso}: ${name}`\n  }\n  else {return 'UNKNOWN'}\n}\n\nconst repValue = rel => (tables, valId) => {\n  const { [rel]: { entities: { [valId]: entity } } } = tables\n  if (entity) {\n    const { values: { rep } } = entity\n    return rep\n  }\n  else {return 'UNKNOWN'}\n}\n\nconst repMap = {\n  user: repUser,\n  country: repCountry,\n  default: repValue,\n}\n\nexport const repRelated = (tables, rel, valId) => (repMap[rel] || repMap.default(rel))(tables, valId)\n\nconst trimDate = text => ((text == null) ? '' : text.replace(/\\.[0-9]+/, ''))\n\nexport const repr = (tables, table, valType, value) => {\n  if (value == null) {return ''}\n  if (typeof valType == 'string') {\n    switch (valType) {\n      case 'datetime': return trimDate(value)\n      default: return value\n    }\n  }\n  else {\n    const { values: rel } = valType\n    return repRelated(tables, rel, value)\n  }\n}\n\n\n\n\n\n// WEBPACK FOOTER //\n// src/js/app/dux/tables.js","/* ACTIONS */\n\nexport const changeWinDim = () => dispatch => {\n  dispatch({ type: 'windim', ...initWinDim() })\n}\n\n/* REDUCER */\n\nexport default (state = initWinDim(), { type, height, width }) => {\n  switch (type) {\n    case 'windim': {\n      return { height, width }\n    }\n    default: return state\n  }\n}\n\n/* SELECTORS */\n\nexport const getWinDim = ({ win: { height, width } }) => ({ height, width })\n\n/* HELPERS */\n\nconst initWinDim = () => {\n  const { innerHeight: height, innerWidth: width } = window\n  return { height, width }\n}\n\nconst scrollBarWidth = 40\nconst leftMargin = 0\n\nconst topHeight = 50\nconst topMargin = 5\n\nconst divWidthSpec = {\n  left: 120,\n  rightLeft: 380,\n  rightLeftNav: 150,\n}\n\nconst floatSpec = {\n  left: 'left',\n  right: 'right',\n  rightLeft: 'left',\n  rightLeftNav: 'left',\n  rightRight: 'right',\n  rightRightBody: 'right',\n}\n\nexport function columnStyle(kind, { height, width }) {\n  const divHeight = {\n    left: height - topHeight,\n    right: height - topHeight,\n    rightLeft: height - topHeight - topMargin,\n    rightLeftNav: height - topHeight - topMargin,\n    rightRight: height - topHeight - topMargin,\n    rightRightBody: height - topHeight - topMargin,\n  }\n  const { left, rightLeft, rightLeftNav } = divWidthSpec\n  const divWidth = {\n    ...divWidthSpec,\n    right: width - left - scrollBarWidth,\n    rightRight: width - left - rightLeft - 2 * scrollBarWidth - leftMargin,\n    rightRightBody: width - left - rightLeftNav - 2 * scrollBarWidth - leftMargin,\n  }\n\n  return {\n    width: divWidth[kind],\n    height: divHeight[kind],\n    float: floatSpec[kind],\n  }\n}\n\n\n\n\n// WEBPACK FOOTER //\n// src/js/app/dux/win.js","import React from 'react'\nimport { render } from 'react-dom'\nimport { Router, Route, Redirect, IndexRoute, IndexRedirect, browserHistory } from 'react-router'\n\nimport configureStore from 'configureStore.js'\nimport rootReducer from 'rootReducer.js'\n\nimport Root from 'Root.jsx'\nimport App from 'App.jsx'\nimport SubApp from 'SubApp.jsx'\nimport Backoffice from 'Backoffice.jsx'\nimport ItemFiltered from 'ItemFiltered.jsx'\nimport ItemMy from 'ItemMy.jsx'\nimport ItemRecordPre from 'ItemRecordPre.jsx'\nimport Doc from 'Doc.jsx'\nimport NotFound from 'NotFound.jsx'\n\nconst store = configureStore(rootReducer)\n\nrender(\n  <Root store={store}>\n    <Router history={browserHistory}>\n      <Redirect from=\"/about\" to=\"/docs/about.md\" />\n      <Redirect from=\"/docs/about\" to=\"/docs/about.md\" />\n      <Redirect from=\"/about.md\" to=\"/docs/about.md\" />\n      <Redirect from=\"/login\" to=\"/docs/about.md\" />\n      <Redirect from=\"/logout\" to=\"/docs/about.md\" />\n      <Redirect from=\"/slogout\" to=\"/docs/about.md\" />\n      <Route path=\"/\" component={App} >\n        <IndexRoute component={App} />\n        <IndexRedirect to=\"/docs/about.md\" />\n        <Route path=\"docs/:docFile\" component={Doc} />\n        <Route path=\"tech/docs/gen/:docFile\" component={Doc} />\n        <Route path=\"tech/docs/:docFile\" component={Doc} />\n        <Route path=\":table\" component={SubApp} >\n          <Route path=\"list\" component={ItemFiltered} />\n          <Route path=\"mylist\" component={ItemMy} >\n            <Route path=\":eId\" component={ItemRecordPre} ownOnly={true} />\n          </Route>\n          <Route path=\":func\" component={Backoffice} />\n        </Route>\n      </Route>\n      <Route path=\"*\" component={NotFound} />\n    </Router>\n  </Root>\n  ,\n  document.getElementById('body')\n)\n\n\n\n\n// WEBPACK FOOTER //\n// src/js/app/main.jsx","import React, { Component } from 'react'\nimport { connect } from 'react-redux'\n\nimport { changeFacetAll, getFilterSetting, testAllChecks } from 'filter.js'\n\nconst indeterminate = states => !states.allTrue && !states.allFalse\n\nclass CheckboxI extends Component {\n  componentDidUpdate() {\n    const { props: { filterSetting } } = this\n    const states = testAllChecks(filterSetting)\n    this.dom.indeterminate = indeterminate(states)\n  }\n  handleCheck = () => {\n    const { props: {filterSetting, table, filterId, handle } } = this\n    const states = testAllChecks(filterSetting)\n    return handle(table, filterId, this.dom.indeterminate || !states.allTrue)\n  }\n  setIndeterminate = domElem => {\n    const { props: { filterSetting } } = this\n    const states = testAllChecks(filterSetting)\n    if (domElem) {\n      this.dom = domElem\n      domElem.indeterminate = indeterminate(states)\n    }\n  }\n  render() {\n    const { props: { filterSetting } } = this\n    const states = testAllChecks(filterSetting)\n    return (\n      <input\n          ref={this.setIndeterminate}\n          type=\"checkbox\"\n          checked={states.allTrue}\n          onChange={this.handleCheck}\n      />\n    )\n  }\n}\n\nexport default connect(getFilterSetting, { handle: changeFacetAll })(CheckboxI)\n\n\n\n// WEBPACK FOOTER //\n// src/js/app/object/CheckboxI.jsx","import React, {Component} from 'react'\nimport { connect } from 'react-redux'\nimport Markdown from 'react-markdown'\nimport { Link } from 'react-router'\n\nimport { getDoc, needDoc, changedDoc, fetchDoc } from 'doc.js'\n\nimport Alternative from 'Alternative.jsx'\n\nconst RouterLink = ({ children, href }) => (\n  href.match(/^(https?:)?\\/\\//)\n    ? <a href={href} >{children}</a>\n    : <Link to={href} >{children}</Link>\n)\n\nclass DocMd extends Component {\n  render() {\n    const {props: { docName, text } } = this\n    const controlPlacement = control => <p style={{float: 'right'}} >{control}</p>\n    const control1 = handler => <a className=\"control fa fa-hand-o-down\" href=\"#\" title=\"markdown source\" onClick={handler} />\n    const control2 = handler => <a className=\"control fa fa-file-code-o\" href=\"#\" title=\"formatted\" onClick={handler} />\n\n    if (needDoc({ text })) {return <div>{`No document ${docName}`}</div>}\n    return (\n      <div style={{paddingLeft: '0.5em'}} >\n        <Alternative\n          tag={docName}\n          controlPlacement={controlPlacement}\n          controls={[control1, control2]}\n          alternatives={[(\n            <div key=\"fmt\" >\n              <Markdown\n                source={text}\n                renderers={{Link: RouterLink}}\n              />\n            </div>\n          ), (\n            <div key=\"src\" >\n              <pre className=\"md-source\" >{text}</pre>\n            </div>\n          )]}\n        />\n      </div>\n    )\n  }\n  componentDidMount() {\n    const { props, props: { fetch } } = this\n    fetch(props)\n  }\n  componentDidUpdate(prevProps) {\n    const { props, props: { fetch } } = this\n    if (changedDoc(props, prevProps)) {\n      fetch(props)\n    }\n  }\n}\n\nexport default connect(getDoc, { fetch: fetchDoc })(DocMd)\n\n\n\n// WEBPACK FOOTER //\n// src/js/app/object/DocMd.jsx","import React, { Component } from 'react'\nimport { connect } from 'react-redux'\nimport L from 'leaflet'\n\nimport {countryBorders} from 'europe.geo.js'\nimport { getFilterSetting } from 'filter.js'\nimport { getTables } from 'tables.js'\nimport { combineSelectors } from 'helpers.js'\n\nimport ByValue from 'ByValue.jsx'\n\nconst mapOptions = {\n  HEIGHT: 250,\n  MAX_RADIUS: 25,\n  LEVEL_OFF: 10,\n  ZOOM_INIT: 3,\n  MAP_CENTER: [52, 12],\n  MAP_BOUNDS: [[30, -20], [70, 40]],\n  MARKER_COLOR: {\n    [true]: {\n      color: '#008800',\n      fillColor: '#00cc00',\n    },\n    [false]: {\n      color: '#888844',\n      fillColor: '#bbbb66',\n    },\n  },\n  MARKER_SHAPE: {\n    weight: 1,\n    fill: true,\n    fillOpacity: 0.8,\n  },\n  COUNTRY_STYLE: {\n    [true]: {\n      color: '#884422',\n      weight: 2,\n      fill: true,\n      fillColor: '#aa7766',\n      fillOpacity: 1,\n    },\n    [false]: {\n      color: '#777777',\n      weight: 1,\n      fill: true,\n      fillColor: '#bbbbbb',\n      fillOpacity: 1,\n    },\n  },\n}\n\nconst computeRadius = (_id, filteredAmountOthers, amounts) => {\n  const amount = amounts ? (amounts[_id] || 0) : 0\n  if (amount == 0) {return 0}\n  const { MAX_RADIUS, LEVEL_OFF } = mapOptions\n  const proportional = MAX_RADIUS * amount / filteredAmountOthers\n  if (filteredAmountOthers < LEVEL_OFF) {return proportional}\n  return LEVEL_OFF * Math.sqrt(proportional)\n}\n\nclass EUMap extends Component {\n  constructor(props) {\n    super(props)\n    this.features = {}\n  }\n  setMap = dom => {if (dom) {this.dom = dom}}\n  render() {\n    const { props: { tables, ...byValueProps }, setMap } = this\n    return (\n      <div>\n        <div\n          ref={setMap}\n        />\n        <ByValue {...byValueProps} />\n      </div>\n    )\n  }\n\n  componentDidMount() {\n    const {\n      props: { filterSetting, filteredAmountOthers, amounts, tables: { country } },\n      dom,\n    } = this\n    const { HEIGHT, MAP_CENTER, ZOOM_INIT, MAP_BOUNDS, MARKER_COLOR, MARKER_SHAPE, COUNTRY_STYLE } = mapOptions\n    dom.style.height = HEIGHT\n    this.map = L.map(dom, {\n      attributionControl: false,\n      center: MAP_CENTER,\n      zoom: ZOOM_INIT,\n      maxBounds: MAP_BOUNDS,\n    })\n    const { order, entities } = country\n    this.idFromIso = {}\n    order.forEach(_id => {\n      const { [_id]: { values: { iso } } } = entities\n      this.idFromIso[iso] = _id\n    })\n    L.geoJSON(countryBorders, {\n      style: feature => COUNTRY_STYLE[this.inDariah(feature)],\n      onEachFeature: feature => {\n        if (this.inDariah(feature)) {\n          const { properties: { iso2, lat, lng } } = feature\n          const { idFromIso: { [iso2]: _id } } = this\n          const { [_id]: isOn } = filterSetting\n          const marker = L.circleMarker([lat, lng], {\n            ...MARKER_COLOR[isOn],\n            radius: computeRadius(_id, filteredAmountOthers, amounts),\n            ...MARKER_SHAPE,\n            pane: 'markerPane',\n          }).addTo(this.map)\n          this.features[iso2] = marker\n        }\n      },\n    }).addTo(this.map)\n  }\n\n  inDariah = feature => !!this.idFromIso[feature.properties.iso2]\n\n  componentDidUpdate() {\n    const { props: { filterSetting, filteredAmountOthers, amounts } } = this\n    const { MARKER_COLOR } = mapOptions\n    Object.entries(this.features).forEach(([iso2, marker]) => {\n      const { idFromIso: { [iso2]: _id } } = this\n      const { [_id]: isOn } = filterSetting\n      marker.setRadius(computeRadius(_id, filteredAmountOthers, amounts))\n      marker.setStyle(MARKER_COLOR[isOn])\n    })\n  }\n}\n\nEUMap.displayName = 'EUMap'\n\nexport default connect(combineSelectors(getTables, getFilterSetting))(EUMap)\n\n\n\n// WEBPACK FOOTER //\n// src/js/app/object/EUMap.jsx","import React, { Component } from 'react'\nimport { connect } from 'react-redux'\n\nimport { setupFiltering, getFiltersApplied } from 'filter.js'\n\nimport ItemList from 'ItemList.jsx'\nimport Filter from 'Filter.jsx'\nimport Pane from 'Pane.jsx'\n\n\nclass FilterCompute extends Component {\n  constructor(props) {\n    super()\n    const { tables, table, initialized, init } = props\n    if (!initialized) {init(tables, table)}\n  }\n  render() {\n    const { props: { initialized } } = this\n    if (!initialized) {return <div />}\n    const { props: { tables, table, filteredData, filteredAmountOthers, amounts} } = this\n    const { [table]: { order, title } } = tables\n    return (\n      <div>\n        <Pane format=\"sized\" position=\"rightLeft\">\n          <p>{'Total '}<span className=\"good-o\" >{order.length}</span></p>\n          <Filter\n            table={table}\n            filteredAmount={filteredData.length}\n            filteredAmountOthers={filteredAmountOthers}\n            amounts={amounts}\n          />\n        </Pane>\n        <Pane format=\"sized\" position=\"rightRight\">\n          <ItemList table={table} title={title} filteredData={filteredData} inplace={true} />\n        </Pane>\n      </div>\n    )\n  }\n}\n\nexport default connect(getFiltersApplied, { init: setupFiltering })(FilterCompute)\n\n\n\n// WEBPACK FOOTER //\n// src/js/app/object/FilterCompute.jsx","import React, { Component } from 'react'\nimport { connect } from 'react-redux'\n\nimport { getTables, needTables, fetchTable } from 'tables.js'\n\nimport FilterCompute from 'FilterCompute.jsx'\n\nclass ItemFiltered extends Component {\n  render() {\n    const { props: { params: { table }, tables } } = this\n    if (needTables(tables, table)) {return <div />}\n    return (\n      <FilterCompute table={table} />\n    )\n  }\n  componentDidMount() {\n    const { props: { params: { table }, tables, fetch } } = this\n    if (needTables(tables, table)) {fetch(table)}\n  }\n}\n\nexport default connect(getTables, { fetch: fetchTable })(ItemFiltered)\n\n\n\n// WEBPACK FOOTER //\n// src/js/app/object/ItemFiltered.jsx","import React, { Component } from 'react'\nimport { connect } from 'react-redux'\n\nimport { getTables, needTables, fetchTableMy } from 'tables.js'\n\nimport ItemList from 'ItemList.jsx'\nimport Pane from 'Pane.jsx'\n\nclass ItemMy extends Component {\n  render() {\n    const { props: { params: { table }, tables, children } } = this\n    if (needTables(tables, table, true) || needTables(tables, ['country', 'user'])) {return <div />}\n    const { [table]: { title, perm, my } } = tables\n    return (\n      <div>\n        <Pane format=\"nav sized\" position=\"rightLeftNav\">\n          <p>\n            {`${my.length} items `}\n            {(perm != null && perm.insert) ? (\n              <span className=\"fa fa-plus\" title=\"new contribution\" />\n            ) : null}\n          </p>\n          <ItemList table={table} title={title} filteredData={my} inplace={false} />\n        </Pane>\n        <Pane format=\"sized\" position=\"rightRightBody\">\n          { children }\n        </Pane>\n      </div>\n    )\n  }\n  componentDidMount() {\n    const { props: { params: { table }, tables, fetch } } = this\n    if (needTables(tables, table, true)) {fetch(table)}\n  }\n}\n\nexport default connect(getTables, { fetch: fetchTableMy })(ItemMy)\n\n\n\n\n// WEBPACK FOOTER //\n// src/js/app/object/ItemMy.jsx","import React, { Component } from 'react'\nimport { connect } from 'react-redux'\n\nimport { getTables, needValues, changedItem, fetchItem } from 'tables.js'\n\nimport ItemField from 'ItemField.jsx'\n\nclass ItemRecord extends Component {\n  parseFields() {\n    const { props: { tables, table, eId } } = this\n    const { [table]: { fieldSpecs, fieldOrder } } = tables\n    const entity = this.getEntity()\n    const { perm, fields, values } = entity\n\n    const fragments = []\n    let hasEditable = false\n    for (const name of fieldOrder) {\n      const { [name]: f } = fields\n      if (f == null) {continue}\n      const { [name]: { label, initial, ...specs } } = fieldSpecs\n      const { update: { [name]: editable } } = perm\n      if (editable) {hasEditable = true}\n      fragments.push(\n        <ItemField\n          key={name}\n          table={table}\n          eId={eId}\n          editable={!!editable}\n          name={name}\n          label={label}\n          values={values[name]}\n          initial={initial}\n          {...specs}\n        />\n      )\n    }\n    return {fragments, hasEditable}\n  }\n\n  getEntity = () => {\n    const { props: { tables, table, eId } } = this\n    const { [table]: { entities: { [eId]: entity } } } = tables\n    return entity\n  }\n\n  render() {\n    const { props: { tables, table, eId } } = this\n    if (needValues({ tables, table, eId })) {return <div />}\n\n    const entity = this.getEntity()\n    const { perm } = entity\n    const { fragments, hasEditable } = this.parseFields()\n    return (\n      <div className=\"widget-medium\" >\n        <p>{`record in ${table}`}</p>\n        <p>\n          {hasEditable ? [\n            <span\n              key=\"save\"\n              className={`button-large`}\n            >{'Save'}</span>,\n            perm.delete ? (\n              <span\n                key=\"delete\"\n                className={'fa fa-trash button-large delete'}\n                title=\"delete this item\"\n              />\n            ) : null,\n          ] : null}\n        </p>\n        <div>{fragments}</div>\n      </div>\n    )\n  }\n  componentDidMount() {\n    const { props, props: { fetch } } = this\n    if (changedItem(props, null)) {fetch(props)}\n  }\n  componentDidUpdate(prevProps) {\n    const { props, props: { fetch } } = this\n    if (changedItem(props, prevProps)) {fetch(props)}\n  }\n}\n\nexport default connect(getTables, { fetch: fetchItem })(ItemRecord)\n\n\n\n\n// WEBPACK FOOTER //\n// src/js/app/object/ItemRecord.jsx","import React, {Component} from 'react'\nimport { connect } from 'react-redux'\n\nimport { getMe, fetchMe } from 'me.js'\n\nclass Login extends Component {\n  render() {\n    const { props: { me } } = this\n    return (\n      <span className=\"login\" >{\n        me.eppn && Object.keys(me).length > 0 ? (\n          <span>\n            <strong className=\"fa fa-user\" title={me.eppn} >{me.eppn.split('@')[0]}</strong>\n            <span className=\"fa fa-hashtag\" />{me.authority}{' '}\n            <em>{me.groupDesc || 'not authenticated'}</em>\n            <a href=\"/logout\" className=\"control fa fa-user-times\" title=\"log out\" />\n            <a href=\"/slogout\" className=\"control fa fa-users\" title=\"sign out\" />\n          </span>\n        ) : (\n          <a href=\"/login\" className=\"control fa fa-user-plus\" >{' login'}</a>\n        )}\n      </span>\n    )\n  }\n  componentDidMount() {\n    const { props: { fetch } } = this\n    fetch({ type: 'fetchMe', contentType: 'db', path: '/who/ami', desc: 'me' })\n  }\n}\n\nexport default connect(getMe, { fetch: fetchMe })(Login)\n\n\n\n\n// WEBPACK FOOTER //\n// src/js/app/object/Login.jsx","import React, { Component } from 'react'\nimport { connect } from 'react-redux'\n\nimport { getNotifications, clear, display } from 'notify.js'\n\nclass Notification extends Component {\n  constructor(props) {\n    super(props)\n    this.dom = {}\n  }\n  refDom = label => dom => {\n    if (dom) {this.dom[label] = dom}\n  }\n  handleBox = () => {\n    const { props: { show, display } } = this\n    display(!show)\n  }\n  handleHide = () => {\n    const { props: { display } } = this\n    display(false)\n  }\n  handleClear = () => {\n    const { props: { clear } } = this\n    clear()\n  }\n\n  render() {\n    const { props: { notifications, lastNote, lastKind, busy, show } } = this\n    const highlight = lastNote > -1\n    const busyBlocks = new Array((busy < 0) ? 0 : busy).fill(1)\n    return (\n      <div>\n        <p className=\"msg-spinner\" >\n          <span\n            title=\"show/hide notifications and progress messages\"\n            className={highlight ? `spin-${lastKind}` : 'spin-ok'}\n          >\n            { busyBlocks.map((b, i) => <span key={i} className=\"msg-dot fa fa-caret-left\" />) }\n            <span\n              className={`fa fa-${busy == 0 ? 'circle-o' : 'spinner fa-spin'}`}\n              onClick={this.handleBox}\n            />\n          </span>\n        </p>\n        {show ? (\n          <div\n            ref={this.refDom('notbox')}\n            className=\"msg-box\"\n            onClick={this.handleHide}\n          >{\n            (notifications).map((msg, i) => (\n              <p\n                key={i}\n                ref={this.refDom(`m${i}`)}\n                className={`msg-line ${[msg.kind]}-o ${(msg.kind != 'info') ? 'msg-high' : ''}`}\n              >{msg.text}</p>\n            ))\n          }\n            <p className=\"msg-dismiss\" >{'(click panel to hide)'}</p>\n            <p className=\"msg-trash\" >\n              <a\n                href=\"#\"\n                title=\"clear messages\"\n                className=\"control fa fa-trash\"\n                onClick={this.handleClear}\n              />\n            </p>\n          </div>\n        ) : null}\n      </div>\n    )\n  }\n  componentDidMount() {this.setView()}\n  componentDidUpdate() {this.setView()}\n\n  setView() {\n    const { props: { show } } = this\n    if (show) {this.setScroll()}\n  }\n  setScroll() {\n    const { props: { show } } = this\n    if (show) {\n      const { props: { lastMsg, lastNote } } = this\n      const highlight = lastNote > -1\n      if (highlight) {\n        this.dom[`m${lastNote}`].scrollIntoView()\n      }\n      else {\n        if (lastMsg > -1) {\n          this.dom[`m${lastMsg}`].scrollIntoView()\n        }\n      }\n    }\n  }\n}\n\nexport default connect(getNotifications, { clear, display })(Notification)\n\n\n\n// WEBPACK FOOTER //\n// src/js/app/object/Notification.jsx","import { Component, Children } from 'react'\nimport { connect } from 'react-redux'\nimport throttle from 'lodash/throttle'\n\nimport { getWinDim, changeWinDim } from 'win.js'\n\nclass Window extends Component {\n  render() {\n    const { props: { children } } = this\n    return Children.only(children)\n  }\n  newWindowSize = throttle(() => {\n    const { props: { resize } } = this\n    resize()\n  }, 1000)\n\n  componentDidMount() {window.addEventListener(\"resize\", this.newWindowSize)}\n  componentWillUnmount() {window.removeEventListener(\"resize\", this.newWindowSize)}\n}\n\nexport default connect(getWinDim, { resize: changeWinDim })(Window)\n\n\n\n// WEBPACK FOOTER //\n// src/js/app/object/Window.jsx","import React from 'react'\n\nconst Backoffice = ({ params: { func } }) => {\n  const headings = {\n    type: 'Contribution types',\n    assess: 'Assessment criteria',\n    package: 'Assessment packages',\n  }\n  const bodies = {\n    type: 'Will be implemented',\n    assess: 'Will be implemented',\n    package: 'Will be implemented',\n  }\n  const heading = headings[func] || 'No such function'\n  const body = bodies[func] || 'Nothing to wait for'\n  return (\n    <div>\n      <h1>{heading}</h1>\n      <p>{body}</p>\n    </div>\n  )\n}\n\nexport default Backoffice\n\n\n\n\n\n// WEBPACK FOOTER //\n// src/js/app/pure/Backoffice.jsx","import React from 'react'\n\nimport DocMd from 'DocMd.jsx'\nimport DocPdf from 'DocPdf.jsx'\nimport DocHtml from 'DocHtml.jsx'\nimport NotFound from 'NotFound.jsx'\n\nconst docType = {\n  md: DocMd,\n  pdf: DocPdf,\n  html: DocHtml,\n}\n\nconst Doc = ({ location: { pathname: docPath } }) => {\n  const [docDir, docFile] = /^(.*)\\/([^/]+)$/g.exec(docPath).slice(1)\n  const [docName, docExt] = /^(.*)\\.([^.]+)$/g.exec(docFile).slice(1)\n  const { [docExt]: DocClass } = docType\n  return DocClass == null ? (\n    <NotFound params={{splat: `document ${docPath}`}} />\n  ) : (\n    <DocClass docDir={docDir} docName={docName} docExt={docExt} tag={docName} />\n  )\n}\n\nexport default Doc\n\n\n\n// WEBPACK FOOTER //\n// src/js/app/pure/Doc.jsx","import React from 'react'\n\nconst DocHtml = ({ docDir, docName, docExt }) => {\n  const src = `/api/file${docDir}/${docName}.${docExt}`\n  return (\n    <iframe\n      height=\"100%\"\n      width=\"100%\"\n      src={src}\n    />\n  )\n}\n\nexport default DocHtml\n\n\n\n// WEBPACK FOOTER //\n// src/js/app/pure/DocHtml.jsx","import React from 'react'\n\nconst DocPdf = ({ docDir, docName, docExt }) => {\n  const href = `/api/file${docDir}/${docName}.${docExt}`\n  const iOS = /iPad|iPhone|iPod/.test(navigator.userAgent) && !window.MSStream\n  return iOS ? (\n    <p>\n      <a target=\"_blank\" rel=\"noopener noreferrer\" href={href} >{docName}</a>{' (open pdf in a new tab)'}\n    </p>\n  ) : (\n    <object\n      height=\"100%\"\n      width=\"100%\"\n      data={href}\n      type=\"application/pdf\"\n    >\n      <a target=\"_blank\" rel=\"noopener noreferrer\" href={href} >{docName}</a>{' (open pdf in a new tab)'}\n    </object>\n  )\n}\n\nexport default DocPdf\n\n\n\n// WEBPACK FOOTER //\n// src/js/app/pure/DocPdf.jsx","import React from 'react'\n\nimport Alternative from 'Alternative.jsx'\nimport ItemRecord from 'ItemRecord.jsx'\nimport NavLink from 'NavLink.jsx'\n\nconst ItemHead = ({ table, values, title, inplace }) => {\n  const { _id: eId, [title]: entityHead = '-empty-' } = values\n\n  const control1 = handler => (<span className=\"button-small fa fa-chevron-down\" onClick={handler} />)\n  const control2 = handler => (<span className=\"button-small fa fa-chevron-right\" onClick={handler} />)\n  const controlPlacement = control => (\n    <p>\n      {control}\n      <span>\n        {entityHead}\n      </span>\n    </p>\n  )\n\n  return (\n    <tr id={eId} >\n      <td>{\n        inplace ? (\n          <Alternative\n            tag={`${table}_${eId}`}\n            controlPlacement={controlPlacement}\n            controls={[control1, control2]}\n            alternatives={[(\n              <ItemRecord\n                key=\"show\"\n                table={table}\n                eId={eId}\n              />\n            ), '']}\n            initial={1}\n          />\n        ) : (\n          <NavLink className=\"nav\" to={`/${table}/mylist/${eId}`} >\n            <span>{entityHead}</span>\n          </NavLink>\n        )\n      }\n      </td>\n    </tr>\n  )\n}\n\nexport default ItemHead\n\n\n\n// WEBPACK FOOTER //\n// src/js/app/pure/ItemHead.jsx","import React from 'react'\n\nimport ItemRecord from 'ItemRecord.jsx'\n\nconst ItemRecordPre = ({ params: { table, eId }, route: { ownOnly } }) => (\n  <ItemRecord table={table} eId={eId} ownOnly={ownOnly} />\n)\n\nexport default ItemRecordPre\n\n\n\n// WEBPACK FOOTER //\n// src/js/app/pure/ItemRecordPre.jsx","import React from 'react'\nimport { Link } from 'react-router'\n\nconst NavLink = props => <Link {...props} activeClassName=\"active\" />\n\nexport default NavLink\n\n\n\n// WEBPACK FOOTER //\n// src/js/app/pure/NavLink.jsx","import React from 'react'\n\nconst NotFound = ({ params: { splat } }) => (<h1>{'404: '}<code>{splat}</code>{' not found on this site.'}</h1>)\n\nexport default NotFound\n\n\n\n\n// WEBPACK FOOTER //\n// src/js/app/pure/NotFound.jsx","import React from 'react'\nimport { Provider } from 'react-redux'\n\nimport Window from 'Window.jsx'\n\nconst Root = ({ store, children }) => (\n  <Provider store={store}>\n    <Window>\n      {children}\n    </Window>\n  </Provider>\n)\n\nexport default Root\n\n\n\n// WEBPACK FOOTER //\n// src/js/app/pure/Root.jsx","import React from 'react'\n\nconst Stat = ({subTotal, total}) => (\n  <span className=\"good-o\" >\n    {subTotal == null ? '' : `${subTotal}`}\n    {(total == null || subTotal == null) ? '' : ' of '}\n    <strong>{total == null ? '' : `${total}`}</strong>\n  </span>\n)\n\nexport default Stat\n\n\n\n// WEBPACK FOOTER //\n// src/js/app/pure/Stat.jsx","import React from 'react'\n\nimport NavLink from 'NavLink.jsx'\n\nconst Static = () => (\n  <span className=\"small\" >\n    <NavLink to=\"/docs/about.md\" >{'About'}</NavLink>\n    <NavLink to=\"/tech/docs/design.pdf\" >{'diagrams'}</NavLink>\n    <NavLink to=\"/tech/docs/deploy.md\" >{'deploy'}</NavLink>\n    <a href=\"/api/file/tech/docs/gen/index.html\" target=\"_blank\" rel=\"noopener noreferrer\" >{'tech doc'}</a>\n  </span>\n)\n\nexport default Static\n\n\n\n\n// WEBPACK FOOTER //\n// src/js/app/pure/Static.jsx","import React from 'react'\nimport { connect } from 'react-redux'\n\nimport { getAlt, nextAlt } from 'alter.js'\n\nconst handleNext = ({ tag, alternatives, initial, next }) => event => {\n  event.preventDefault()\n  next(tag, alternatives.length, initial)\n}\n\nconst Alternative = ({ controlPlacement, controls, alt, alternatives, ...rest }) => (\n  <div>\n    {controlPlacement(controls[alt](handleNext({ alternatives, ...rest })))}\n    {alternatives[alt]}\n  </div>\n)\n\nexport default connect(getAlt, { next: nextAlt })(Alternative)\n\n\n\n// WEBPACK FOOTER //\n// src/js/app/state/Alternative.jsx","import React from 'react'\nimport { connect } from 'react-redux'\n\nimport { getWinDim } from 'win.js'\n\nimport Login from 'Login.jsx'\nimport NavLink from 'NavLink.jsx'\nimport Static from 'Static.jsx'\nimport Notification from 'Notification.jsx'\n\nconst App = ({ children, height, width }) => {\n  const text = `${width} x ${height}`\n  return (\n    <div>\n      <Notification />\n      <p className=\"nav small top\" >\n        <img\n          src=\"/static/images/inkind_logo_small.png\"\n          title=\"information about this site\"\n        />\n        <NavLink to=\"/contrib\" >{'Contributions'}</NavLink>\n        <span>{'yw'}</span>\n        <NavLink to=\"/backoffice\" >{'Backoffice'}</NavLink>\n        <Static />\n        <span className=\"resize\" title={text}>{text}</span>\n        <Login />\n      </p>\n      <div>{children}</div>\n    </div>\n  )\n}\n\nexport default connect(getWinDim)(App)\n\n\n\n// WEBPACK FOOTER //\n// src/js/app/state/App.jsx","import React from 'react'\nimport { connect } from 'react-redux'\n\nimport { getFieldValues, placeFacets } from 'filter.js'\n\nimport Facet from 'Facet.jsx'\nimport CheckboxI from 'CheckboxI.jsx'\nimport Stat from 'Stat.jsx'\nimport Alternative from 'Alternative.jsx'\n\nconst ByValue = ({\n  table,\n  filterId, filterLabel,\n  fieldValues,\n  filteredAmount, filteredAmountOthers,\n  amounts, maxCols,\n  expanded,\n}) => {\n  const rows = placeFacets(fieldValues, maxCols)\n  const control1 = handler => (<span className=\"button-small fa fa-chevron-down\" onClick={handler} />)\n  const control2 = handler => (<span className=\"button-small fa fa-chevron-right\" onClick={handler} />)\n  const controlPlacement = control => (\n    <p className=\"facet\" >\n      <CheckboxI\n        table={table}\n        filterId={filterId}\n      /> {filterLabel}{' '}\n      <Stat subTotal={filteredAmount} total={filteredAmountOthers} />{' '}\n      {control}\n    </p>\n  )\n  return (\n    <div className=\"facet\" >{\n      rows === null ? (<p>{' -no facets '}</p>) : (\n        <Alternative\n          tag={`${table}_${filterId}`}\n          controlPlacement={controlPlacement}\n          controls={[control1, control2]}\n          initial={expanded ? 0 : 1}\n          alternatives={[\n            (<table key=\"table\" >\n              <tbody>\n                {rows.map((entity, i) => (\n                  <tr key={i} >\n                    {entity.map((f, j) => {\n                      if (f === null) {\n                        return <td key={j} />\n                      }\n                      const [valueId, valueRep] = f\n                      const facetClass = (j == 0) ? \"facet\" : \"facet mid\"\n                      return [(\n                        <td\n                         key={valueId}\n                         className={facetClass}\n                        >\n                          <Facet\n                            table={table}\n                            filterId={filterId}\n                            valueId={valueId}\n                            valueRep={valueRep}\n                          />\n                        </td>\n                      ), (\n                        <td\n                          key=\"stat\"\n                          className=\"statistic\"\n                        >\n                          <Stat subTotal={amounts[valueId]} />\n                        </td>\n                      )]\n                    })}\n                  </tr>\n                  ))}\n              </tbody>\n            </table>),\n            (<div key=\"div\" />),\n          ]}\n        />\n      )}\n    </div>\n  )\n}\n\nexport default connect(getFieldValues)(ByValue)\n\n\n\n// WEBPACK FOOTER //\n// src/js/app/state/ByValue.jsx","import React from 'react'\nimport { connect } from 'react-redux'\n\nimport { changeFacet, getFilterSetting } from 'filter.js'\n\nconst handleChange = (handle, table, filterId, valueId, isOn) => () => handle(table, filterId, valueId, !isOn)\n\nconst Facet = ({ table, filterId, valueId, valueRep, filterSetting, handle }) => {\n  const { [valueId]: isOn } = filterSetting\n  return (\n    <span>\n      <input\n        type=\"checkbox\"\n        checked={isOn}\n        className=\"facet\"\n        onChange={handleChange(handle, table, filterId, valueId, isOn)}\n      />\n      {` ${valueRep}`}\n    </span>\n  )\n}\n\nexport default connect(getFilterSetting, { handle: changeFacet })(Facet)\n\n\n\n// WEBPACK FOOTER //\n// src/js/app/state/Facet.jsx","import React from 'react'\nimport { connect } from 'react-redux'\n\nimport { getTableFilters } from 'tables.js'\n\nimport FullText from 'FullText.jsx'\nimport ByValue from 'ByValue.jsx'\nimport EUMap from 'EUMap.jsx'\n\nconst filterClass = {\n  FullText,\n  EUMap,\n  ByValue,\n}\n\nconst Filter = ({\n  table, fields,\n  filterList, filteredAmount, filteredAmountOthers, amounts,\n}) => (\n  <div>\n    {filterList.filter(x => fields[x.field]).map((filter, filterId) => {\n      const { type } = filter\n      const { [type]: Fclass } = filterClass\n      return (\n        <Fclass\n          key={filterId}\n          table={table}\n          filterId={filterId}\n          filterField={filter.field}\n          filterLabel={filter.label}\n          maxCols={filter.maxCols}\n          filteredAmount={filteredAmount}\n          filteredAmountOthers={filteredAmountOthers[filterId]}\n          amounts={amounts[filterId]}\n          expanded={filter.expanded}\n        />\n      )}\n    )}\n  </div>\n)\n\nexport default connect(getTableFilters)(Filter)\n\n\n\n// WEBPACK FOOTER //\n// src/js/app/state/Filter.jsx","import React from 'react'\nimport { connect } from 'react-redux'\n\nimport { changeFulltext, getFilterSetting } from 'filter.js'\n\nimport Stat from 'Stat.jsx'\n\nconst handleChange = (handle, table, filterId) => event => handle(table, filterId, event.target.value)\n\nconst FullText = ({\n  table,\n  filterId, filterField, filterLabel,\n  filterSetting,\n  filteredAmount, filteredAmountOthers,\n  handle,\n}) => (\n  <div>\n    <p title={`Search in ${filterField}`} >\n      <input\n        type=\"text\"\n        className=\"search\"\n        placeholder={`search in ${filterLabel}`}\n        value={filterSetting}\n        onChange={handleChange(handle, table, filterId)}\n      />{' '}\n      <Stat subTotal={filteredAmount} total={filteredAmountOthers} />\n    </p>\n  </div>\n)\n\nexport default connect(getFilterSetting, { handle: changeFulltext })(FullText)\n\n\n\n// WEBPACK FOOTER //\n// src/js/app/state/FullText.jsx","import React from 'react'\nimport { connect } from 'react-redux'\n\nimport { getTables, repr } from 'tables.js'\n\nconst ItemField = ({ tables, table, label, values, valType, multiple }) => {\n  const theValues = multiple ? values : [values]\n  return (\n    <p>\n      <label><b>{`${label}:`}</b></label>{' '}\n      {\n        theValues.map((value, i) => (\n          <span key={i}>{(i != 0) ? ' | ' : ''}<span>{repr(tables, table, valType, value)}</span></span>\n        ))\n      }\n    </p>\n  )\n}\n\nexport default connect(getTables)(ItemField)\n\n\n\n// WEBPACK FOOTER //\n// src/js/app/state/ItemField.jsx","import React from 'react'\nimport { connect } from 'react-redux'\n\nimport { getTables } from 'tables.js'\n\nimport ItemHead from 'ItemHead.jsx'\n\nconst ItemList = ({ tables, table, title, filteredData, inplace }) => {\n  const { [table]: { entities } } = tables\n  return (\n    <div>\n      <table>\n        <tbody>{\n        filteredData.map(eId => {\n          const { [eId]: { values } } = entities\n          return (\n            <ItemHead key={eId} table={table} title={title} values={values} inplace={inplace} />\n          )\n        })\n        }</tbody>\n      </table>\n    </div>\n  )\n}\n\nexport default connect(getTables)(ItemList)\n\n\n\n// WEBPACK FOOTER //\n// src/js/app/state/ItemList.jsx","import React from 'react'\nimport { connect } from 'react-redux'\n\nimport { getWinDim, columnStyle } from 'win.js'\n\nconst Pane = ({ format, position, children, height, width }) => (\n  <div\n    className={format}\n    style={columnStyle(position, { height, width })}\n  >\n    {children}\n  </div>\n)\n\nexport default connect(getWinDim)(Pane)\n\n\n\n// WEBPACK FOOTER //\n// src/js/app/state/Pane.jsx","import React from 'react'\nimport { connect } from 'react-redux'\n\nimport { getWinDim } from 'win.js'\n\nimport NavLink from 'NavLink.jsx'\nimport Pane from 'Pane.jsx'\n\nconst SubApp = ({params: { table }, children }) => (\n  <div>\n    <Pane format=\"nav sized\" position=\"left\">\n      {(table == 'contrib') ? (\n        <div>\n          <p><NavLink to={`/${table}/list`} >{'All items'}</NavLink></p>\n          <p><NavLink to={`/${table}/mylist`} >{'My work'}</NavLink></p>\n        </div>\n      ) : (\n        <div>\n          <p><NavLink to={`/${table}/type`} >{'Types'}</NavLink></p>\n          <p><NavLink to={`/${table}/assess`} >{'Criteria'}</NavLink></p>\n          <p><NavLink to={`/${table}/package`} >{'Packages'}</NavLink></p>\n        </div>\n      )}\n    </Pane>\n    <Pane format=\"sized\" position=\"right\">\n      { children }\n    </Pane>\n  </div>\n)\n\nexport default connect(getWinDim)(SubApp)\n\n\n\n// WEBPACK FOOTER //\n// src/js/app/state/SubApp.jsx"],"mappings":";;;;;;AAAA;;;;;;;;ACAA;;;;;;;;;ACAA;;;;;;;;ACAA;;;;;;;;ACAA;;;;;;;;ACAA;;;;;;;;ACAA;;;;;;;;ACAA;;;;;;;;ACAA;;;;;;;;ACAA;;;;;;;;ACiDA;;;;;;;;ACjDA;;;;;;;;ACAA;;;;;;;;ACAA;;;;;;;;ACAA;;;;;;;;ACAA;;;;;;;;ACAA;;;;;;;;ACAA;;;;;;;;ACAA;;;;;;;;ACAA;;;;;;;;ACAA;;;;;;;;ACAA;;;;;;;;ACAA;;;;;;;;ACAA;;;;;;;;ACAA;;;;;;;;ACAA;;;;;;;;ACAA;;;;;;;;ACAA;;;;;;;;ACAA;;;;;;;;ACAA;;;;;;;;ACAA;;;;;;;;ACAA;;;;;;;;ACAA;;;;;;;;ACAA;;;;;;;;ACAA;;;;;;;;ACAA;;;;;;;;ACAA;;;;;;;;ACAA;;;;;;;;ACAA;;;;;;;;ACAA;;;;;;;;ACAA;;;;;;;;ACAA;;;;;;;;ACAA;;;;A","sourceRoot":""}