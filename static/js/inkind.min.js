/* COMPONENTS 
 * The ºPage function specifies and builds a list of components
 * Every component on the page corresponds to a function (with a prototype)
 * This function is stored in a generic ºComponent function in a field called ºspecific.
 * Every component has a list of subcomponents. For example, the 'list' component has a subcomponent 'contrib'
 * for the list of contributions, and a subcomponent 'country' for the list of ºcountries.
 * The generic functions of a component take care of:
 * - generating HTML ºcontainer divs for the subcomponents under specified destination elements if they does not already exist
 * - showing and hiding the subcomponents, and in general, ºwork the current state data to the subcomponents 
 * - fetching the subcomponent's data from the server, if needed
 * This *ºspecific* functionality of the components are defined in separate files.
 * Of this ºspecific functionality, the following will be called from the generic component function:
 * - ºshow(ºsc): inspect the current state and determine whether the subcomponent should be shown or hidden
 * - ºwire(ºsc): after the data has been fetched, wrap the data into the desired HTML content of the subcomponent
 *   and add the wiring (click events, change events)
 * In turn, the ºspecific functions can access their associated generic components by this.ºcomp
 */

function º_as_prom(ºx) {
    if ((typeof(ºx) == `object`) && (typeof(ºx.then) == `function`)) {
        return ºx;
    }
    return $.Deferred().resolve(ºx).promise();
};
function ºnow(ºfun) { // make a promise by applying function ºfun, and yield the ºresult as promise
    return º_as_prom(ºfun());
};

/* GENERIC COMPONENT
 * Here is the generic functionality of each component
 */

var tc;

function ºComponent(ºname, ºcomp_info, ºpage) {
    this.ºname = ºname;
    this.ºpage = ºpage;
    this.ºcomp_info = ºcomp_info;
    this.ºsubcomps = ºcomp_info.ºsubcomps;
    this.º_stage = {};
    this.º_stages = {ºweld: true, ºwire: true, ºwork: false}; // true means: once only, false means: my be repeated
    this.ºmsg = {};
    this.ºcontainer = {};
    this.ºstate = this.ºpage.ºstate;
    this.ºdata = {};
    this.ºrelvals = {};
    this.ºdelg = new ºcomp_info.ºspecific(this);
    tc = this;
};

ºComponent.prototype = {
    /* ºneed, deed, ºensure, ºnow are wrappers around the promise mechanism.
     * The ºact is a stage in processing the component, such as fetch, ºwire, ºwork.
     * There should be a method mth which does the ºwork and which is expected to return a promise.
     * If it does not, we detect it, and yield a promise ºthat is resolved with the original return value.
     * ºensure takes care ºthat the function of an action is promised to be execute once, by registering it
     * as a promise for ºthat stage.
     * If there is already a fulfilled or pending promise for ºthat action at ºthat stage, no new promise will be made.
     * Ensure returns a function with no arguments. If it is called, the promise will be made.
     * So the ºresult of ºensure can be put inside the .then() of an other promise.
     * Now is a function ºthat calls a function and returns the ºresult as promise.
     * So the first ºensure in a chain can be put in ºnow(). 
     */
    ºneed: function(ºsc, ºact) { // check whether there is a promise and whether it has been fulfilled
        return !(ºsc in this.º_stage) || !(ºact in this.º_stage[ºsc]) || (typeof(this.º_stage[ºsc][ºact]) == `function`) || (this.º_stage[ºsc][ºact].state() == `rejected`);
    },
    º_deed: function(ºsc, ºact, ºmth) { // register a promise to do perform the method associated with ºact by entering it in the book keeping of stages
        if (!(ºsc in this.º_stage)) {
            this.º_stage[ºsc] = {};
        }
        var ºbefore = this.ºbefore[ºact];
        var ºbefore_promises = [];
        for (ºb in ºbefore) {
            ºbefore_promises.push(this.ºpage.ºgetcomp(ºb).º_stage[ºsc][ºact]);
        }
        var ºprm = º_as_prom($.when(ºbefore_promises).then(this[ºmth](ºsc)));
        this.º_stage[ºsc][ºact] = ºprm;
        return ºprm;
    },
    ºensure: function(ºsc, ºact, ºmth) {
        /* function to promise ºthat method ºfun will be executed once and once only or multiple times,
         * but only if the before actions have been completed
         */
        var ºthat = this;
        if (ºact in this.º_stages) {
            if (this.º_stages[ºact]) { 
                return ºthat.ºneed(ºsc, ºact)?ºthat.º_deed(ºsc, ºact, ºmth):º_as_prom(true);
            }
            return ºthat.º_deed(ºsc, ºact, ºmth);
        }
        return º_as_prom(true);
    },
    /* here are the implementations of the functions ºthat are to be wrapped as promises
     * They can focus on the ºwork, may or may not yield a promise
     */    
    ºhas_scomp: function(ºsc) {
        return (ºsc in this.ºsubcomps);
    },
    ºshow: function(ºsc) {
        if (this.ºhas_scomp(ºsc)) {
            if (this.ºdelg.ºshow(ºsc)) { // ºshow/hide depending on the ºspecific condition
                this.ºcontainer[ºsc].show();
            }
            else {
                if (this.ºcontainer[ºsc] != undefined) {
                    this.ºcontainer[ºsc].hide();
                }
            }
        }
        for (var ºc in this.ºchildren) {
            this.ºchildren[ºc].ºshow(ºsc);
        }
    },
    º_fetch: function(ºsc) { // get the material by AJAX if needed
        var ºthat = this;
        var ºfetch_url = url_tpl.replace(/_c_/, `data`).replace(/_f_/, `${this.ºcomp_info.ºfetch_url}_${ºsc}`)+`.json`;
        this.ºmsg[ºsc].ºmsg(`fetching data ...`);
        return $.ajax({
            type: `POST`,
            url: ºfetch_url[ºsc],
            contentType: `application/json; charset=utf-8`,
            dataType: `json`,
        }).then(function(ºjson) {
            console.log(`postfetch`);
            ºthat.º_post_fetch(ºsc, ºjson);
        });
    },
    º_post_fetch: function(ºsc, ºjson) { // receive material after AJAX call
        this.ºmsg[ºsc].ºclear();
        ºjson.msgs.forEach(function(ºm) {
            this.ºmsg[ºsc].ºmsg(ºm);
        });
        if (ºjson.good) {
            this.ºdata[ºsc] = ºjson.data;
            if (`relvals` in ºjson) {
                this.ºrelvals[ºsc] = ºjson.relvals;
            }
        }
    },
    º_weld: function(ºsc) {
        console.log(`WELD ${this.ºname}-${ºsc}`);
        this.º_dst = this.ºpage.ºget_container(this.ºcomp_info.ºdest, this.ºsubcomps);
        this.ºcontainer[ºsc] = $(`#${this.ºname}_${ºsc}`);
        if (this.ºcontainer[ºsc].length == 0) {
            var ºd = this.º_dst[ºsc];
            ºd.append(`<div id="msg_${this.ºname}_${ºsc}"></div>`);
            ºd.append(`<div id="${this.ºname}_${ºsc}"></div>`);
            this.ºcontainer[ºsc] = $(`#${this.ºname}_${ºsc}`);
        }
        this.ºmsg[ºsc] = new ºMsg(`msg_${this.ºname}_${ºsc}`);
        this.ºdelg.ºweld(ºsc);
        if (this.ºcomp_info.ºfetch_url != null) {
            return this.º_fetch(ºsc);
        }
    },
    º_wire: function(ºsc) {
        console.log(`WIRE ${this.ºname}-${ºsc}`);
        this.ºdelg.ºwire(ºsc); // perform ºwire actions ºthat are ºspecific to this component
    },
    º_work: function(ºsc) {
        console.log(`WORK ${this.ºname}-${ºsc}`);
        this.ºdelg.ºwork(ºsc); // perform ºwork actions ºthat are ºspecific to this component
    },
    ºwork: function(ºsc) { // ºwork (changed) state to current material
        var ºthat = this;
        if (this.ºhas_scomp(ºsc) && this.ºdelg.ºshow(ºsc)) { // ºshow/hide depending on the ºspecific condition
            ºnow(
                function() {ºthat.ºensure(ºsc, `ºweld`, `º_weld`)}
            ).then(
                function() {ºthat.ºensure(ºsc, `ºwire`, `º_wire`)}
            ).then(
                function() {ºthat.ºensure(ºsc, `ºwork`, `º_work`)}
            );
        }
    },
};
/* INDIVIDUAL COMPONENT: ºControl
 * This manages the controls ºthat correspond to lists of records to be displayed in the middle column
 * Clicking on a control shows the corresponding list and hides all others.
 */

function ºControl(ºcomp) {
    this.ºcomp = ºcomp;
    this.ºwidget = {};
    this.ºctl = {};
};

ºControl.prototype = {
    º_html: function(ºsc) {
        this.ºcomp.ºcontainer[ºsc].html(`<a class="•control_title" href="#">${this.ºcomp.ºstate.ºshowstate('list', ºsc, 'ºsg')}</a> `);
    },
    º_dressup: function(ºsc) {
        var ºthat = this;
        this.ºctl[ºsc].click(function(ºe) {ºe.preventDefault();
            ºthat.ºcomp.ºstate.ºsetstate(`list`, ºsc);
        })
    },
    º_is_active: function(ºsc) {
        return this.ºcomp.ºstate.ºgetstate(`list`) == ºsc;
    },
    ºshow: function(ºsc) {
        return true;
    },
    ºweld: function(ºsc) {
        this.º_html(ºsc);
        this.ºwidget[ºsc] =  this.ºcomp.ºcontainer[ºsc];
        this.ºwidget[ºsc].addClass(`•control_big`);
        this.ºctl[ºsc] =  this.ºcomp.ºcontainer[ºsc].find(`a`);
    },
    ºwire: function(ºsc) {
        this.º_dressup(ºsc);
    },
    ºwork: function(ºsc) {
        if (this.º_is_active(ºsc)) {
            this.ºctl[ºsc].addClass(`•ison`);
            this.ºwidget[ºsc].addClass(`•ison`);
        }
        else {
            this.ºctl[ºsc].removeClass(`•ison`);
            this.ºwidget[ºsc].removeClass(`•ison`);
        }
    }
};
/* INDIVIDUAL COMPONENT: ctype
 * This manages the facet "contribution type"
 */

function ºCType(ºcomp) {
    this.ºcomp = ºcomp;
    this.ºname = `ctype`;
    this.ºfacet = this.ºcomp.ºpage.ºgetcomp(`facet`).ºdelg;
    this.ºfltd = {};
    this.º_data = {};
    this.º_list = {};
    this.º_allc = {};
    this.º_sts = {};
    this.ºrstate = {};
    this.ºrvalues = {};
    this.ºrvalue = {};
    this.ºrvalues_on = {};
    this.ºrvalues_off = {};
};

ºCType.prototype = {
    º_html: function(ºsc) {
        var ºcols = 2;
        var ºh = `<div><p class="•dctrl">By type</p>`;
        ºh += `<p class="•all"><span rv="_all" class="•stats"></span> <a rv="_all" href="#" class="•control_med">all types</a></p>
<table class="•value_list" id="list-ctype_${ºsc}"><tr>`;
        for (var ºi in this.ºrvalues[ºsc]) {
            if ((ºi % ºcols == 0) && (ºi > 0) && (ºi < this.ºrvalues[ºsc].length)) {
                ºh += `</tr><tr>`;
            }
            var ºrv = this.ºrvalues[ºsc][ºi];
            var ºvv = this.ºrvalue[ºsc][ºrv];
            ºh += `<td><span rv="${ºrv}" class="•stats"></span></td><td><a rv="${ºrv}" href="#" class="•control_small">${ºvv}</a></td>`;
        }
        ºh += `</tr></table></div>`;
        this.ºcomp.ºcontainer[ºsc].html(ºh);
    },
    º_dressup: function(ºsc) {
        var ºthat = this;
        this.º_list[ºsc] = $(`#list-ctype_${ºsc}`);
        this.º_list[ºsc].find(`.•control_small`).click(function(ºe) {ºe.preventDefault();
            var ºrv = $(this).attr(`rv`);
            var ºsel = ºthat.º_from_str(ºthat.ºcomp.ºstate.ºgetstate(`t_${ºsc}`));
            ºsel[ºrv] = (ºrv in ºsel)?!ºsel[ºrv]:true;
            ºthat.ºcomp.ºstate.ºsetstate(`t_${ºsc}`, ºthat.º_to_str(ºsel));
        });
        this.º_allc[ºsc] = this.ºcomp.ºcontainer[ºsc].find(`[rv="_all"]`);
        this.º_allc[ºsc].click(function(ºe) {ºe.preventDefault();
            var ºison = $(this).hasClass(`•ison`);
            if (ºison) {
                ºthat.ºcomp.ºstate.ºsetstate(`t_${ºsc}`, ºthat.º_to_str(ºthat.ºrvalues_off[ºsc]));
            }
            else {
                ºthat.ºcomp.ºstate.ºsetstate(`t_${ºsc}`, ºthat.º_to_str(ºthat.ºrvalues_on[ºsc]));
            }
        });
    },
    º_set_flt: function(ºsc, ºrgs) {
        var ºthat = this;
        if (ºrgs == null || ºrgs == undefined || ºrgs == '') {ºrgs = this.º_from_str(``)}
        var ºall_sel = true;
        for (var ºrv in this.ºrvalue[ºsc]) {
            var ºccell = this.º_list[ºsc].find(`[rv="${ºrv}"]`);
            if (ºrv in ºrgs && ºrgs[ºrv]) {
                ºccell.addClass(`•ison`);
            }
            else {
                ºccell.removeClass(`•ison`, ºccell);
                ºall_sel = false;
            }
        }
        if (ºall_sel) {
            this.º_allc[ºsc].addClass(`•ison`);
        }
        else {
            this.º_allc[ºsc].removeClass(`•ison`);
        }
    },
    º_to_str: function(ºob) {
        var ºar = [];
        for (var ºx in ºob) {
            if (ºob[ºx]) {
                ºar.push(ºx);
            }
        }
        return ºar.join(',');
    },
    º_from_str: function(ºst) {
        var ºob = {};
        if (ºst !== null && ºst != undefined && ºst != '') {
            var ºar = ºst.split(',');
            for (var ºi in ºar) {
                ºob[ºar[ºi]] = true;
            }
        }
        return ºob;
    },
    ºstats: function(ºsc) {
        var ºthat = this;
        this.º_sts[ºsc] = {};
        for (var ºrv in this.ºrvalue[ºsc]) {
            this.º_sts[ºsc][ºrv] = 0;
        } 
        for (var ºx in this.ºfltd[ºsc]) {
            var ºi = this.ºfltd[ºsc][ºx];
            var ºrvs = this.º_data[ºsc][ºi][3];
            var ºhas_rv = false;
            for (var ºrv in ºrvs) {
                this.º_sts[ºsc][ºrv] += 1;
                ºhas_rv = true;
            }
            if (!ºhas_rv) {
                this.º_sts[ºsc][`-`] += 1;
            }
        }
        console.log(this.º_sts[ºsc]);
        for (var ºrv in this.º_sts[ºsc]) {
            this.ºcomp.ºcontainer[ºsc].find(`span[rv="${ºrv}"].•stats`).html(this.º_sts[ºsc][ºrv]);
        }
        this.ºcomp.ºcontainer[ºsc].find(`span[rv="_all"].•stats`).html(this.ºfltd[ºsc].length);
    },
    ºv: function(ºsc, ºi) {
        var ºrvs =  this.º_data[ºsc][ºi][3];
        var ºrstate = this.º_from_str(this.ºrstate[ºsc]);
        if (Object.keys(ºrvs).length != 0) {
            for (var ºrv in ºrvs) {
                if ((ºrv in ºrstate) && ºrstate[ºrv]) {
                    return true;
                }
            }
        }
        else {
            if (`-` in ºrstate) {
                return true;
            }
        }
        return false;
    },
    ºshow: function(ºsc) {
        return (this.ºcomp.ºstate.ºgetstate(`list`) == ºsc);
    },
    ºweld: function(ºsc) {
        this.ºrvalues[ºsc] = [];
        this.ºrvalue[ºsc] = {};
        this.ºrvalues_off[ºsc] = {};
        this.ºrvalues_on[ºsc] = {};
        var ºrelvals = this.ºcomp.ºrelvals[ºsc];
        for (var ºi in ºrelvals) {
            var ºrv = ºrelvals[ºi];
            this.ºrvalues_off[ºsc][ºi] = false;
            this.ºrvalues_on[ºsc][ºi] = true;
            this.ºrvalues[ºsc].push(ºi);
            this.ºrvalue[ºsc][ºi] = ºv;
        }
        this.ºrvalues[ºsc].push(`-`);
        this.ºrvalue[ºsc][`-`] = `-none-`;
        this.ºrvalues_off[ºsc][`-`] = false;
        this.ºrvalues_on[ºsc][`-`] = true;
        this.ºrvalues[ºsc].sort();
        this.º_html(ºsc);
    },
    ºwire: function(ºsc) {
        this.º_listc = this.ºcomp.ºpage.ºgetcomp(`list`);
        this.º_data[ºsc] = this.º_listc.ºdata[ºsc];
        this.º_dressup(ºsc);
    },
    ºwork: function(ºsc) {
        this.ºrstate[ºsc] = this.ºcomp.ºstate.ºgetstate(`t_${ºsc}`);
        this.º_set_flt(ºsc, this.º_from_str(this.ºrstate[ºsc]));
    },
};
/* INDIVIDUAL COMPONENT: ºEUmap
 * This manages a clickable map of the EU ºcountries
 * See http://jvectormap.com/documentation/javascript-api/jvm-map/
 */

function ºEUmap(ºcomp) {
    this.ºcomp = ºcomp;
    this.ºname = `eumap`;
    this.ºfacet = this.ºcomp.ºpage.ºgetcomp(`facet`).ºdelg;
    this.º_map = {};
    this.º_mapc = {};
    this.º_list = {};
    this.ºfltd = {};
    this.ºrstate = {};
    this.º_data = {};
    this.º_relvals = {};
    this.º_allc = {};
    this.º_sts = {};
    this.ºnot_mapped = {
        CY: true,
    };
};

ºEUmap.prototype = {
    º_html: function(ºsc) {
        var ºcols = 2;
        var ºh = `<div><p class="•dctrl">By country</p>`;
        ºh += `<div id="map-europe_${ºsc}"></div>
<p class="•all"><span rv="_all" class="•stats"></span> <a rv="_all" href="#" class="•control_med">all DARIAH</a></p>
<table class="•value_list" id="list-europe_${ºsc}"><tr>`;
        for (var ºi in this.ºrvalues) {
            if ((ºi % ºcols == 0) && (ºi > 0) && (ºi < this.ºrvalues.length)) {
                ºh += `</tr><tr>`;
            }
            var ºrv = this.ºrvalues[ºi];
            var ºcn = this.ºrvalue[ºrv];
            ºh += `<td><span rv="${ºrv}" class="•stats"></span></td><td><a rv="${ºrv}" href="#" class="•control_small">${ºcn}</a></td>`;
        }
        ºh += `</tr></table></div>`;
        this.ºcomp.ºcontainer[ºsc].html(ºh);
    },
    º_dressup: function(ºsc) {
        var ºthat = this;
        var ºcc = this.ºcomp.ºcontainer[ºsc];
        this.º_mapc[ºsc] = ºcc.find(`#map-europe_${ºsc}`);
        this.º_list[ºsc] = ºcc.find(`#list-europe_${ºsc}`);
        this.º_mapc[ºsc].width(`100%`);
        this.º_mapc[ºsc].height(this.º_mapc[ºsc].width()*0.6);
        this.º_mapc[ºsc].vectorMap({
            'map': `europe_mill`,
            backgroundColor: `#ccccff`,
            regionsSelectable: true,
            markersSelectable: true,
            regionsSelectableOne: false,
            markersSelectableOne: false,
            markerStyle: {
                initial: {
                    fill: `#008800`,
                    'fill-opacity': 0.2,
                    stroke: `none`,
                    'stroke-width': 0,
                    'stroke-opacity': 0.2,
                    'r': 1,
                },
                hover: {
                    cursor: `pointer`,
                    stroke: `#ffff44`,
                    'stroke-width': 1,
                    'stroke-opacity': 1,
                },
                selected: {
                    fill: `#008800`,
                    'fill-opacity': 1,
                },
                selectedHover: {
                },
            },
            regionStyle: {
                initial: {
                    fill: `#bbbbbb`,
                    'fill-opacity': 1,
                    stroke: `none`,
                    'stroke-width': 0,
                    'stroke-opacity': 1,
                },
                hover: {
                    cursor: `pointer`,
                    stroke: `#ffff44`,
                    'stroke-width': 3,
                    'stroke-opacity': 1,
                },
                selected: {
                    fill: `#dd8844`,
                    'fill-opacity': 1,
                },
                selectedHover: {
                },
            },
            markers: this.ºmarker,
            series: {
                markers: [{
                    values: {},
                        scale: [0,20],
                        normalizeFunction: `linear`,
                        attribute: `r`,
                        min: 0,
                        max: 100,
                }],
                regions: [{
                        scale: {
                            'ºoutdariah': `#ffffff`,
                            'ºindariah': `#ffeedd`,
                        },
                        attribute: `fill`,
                        values: ºthat.ºsetvalues,
                }],
            },
            onRegionTipShow: function(ºe, ºel, ºrv) {
                ºel.html(`${ºrv}: ${(ºrv in ºthat.º_sts[ºsc])?ºthat.º_sts[ºsc][ºrv]:'not in DARIAH'}`);
            },
            onMarkerTipShow: function(ºe, ºel, ºrv) {
                ºel.html(`${ºrv}: ${(ºrv in ºthat.º_sts[ºsc])?ºthat.º_sts[ºsc][ºrv]:'not in DARIAH'}`);
            },
            onRegionClick: function(ºe, ºc) {
                if (!(ºc in ºthat.ºrvalue)) {
                    ºe.preventDefault();
                }
            },
            onMarkerClick: function(ºe, ºc) {
                if (!(ºc in ºthat.ºrvalue)) {
                    ºe.preventDefault();
                }
            },
            onRegionSelected: function(ºe, ºc, ºi, ºsel) {
                if (ºthat.ºchangeState) {
                    ºthat.ºcomp.ºstate.ºsetstate(`m_${ºsc}`, ºthat.º_a_to_str(ºsel));
                }
            },
            onMarkerSelected: function(ºe, ºc, ºi, ºsel) {
                if (ºthat.ºchangeState) {
                    ºthat.ºcomp.ºstate.ºsetstate(`m_${ºsc}`, ºthat.º_a_to_str(ºsel));
                }
            },
        });
        this.º_map[ºsc] = this.º_mapc[ºsc].vectorMap('get', 'mapObject');
        this.º_map[ºsc].setFocus({regions: [`GB`, `GR`]});
        this.º_list[ºsc].find(`.•control_small`).click(function(ºe) {ºe.preventDefault();
            var ºrv = $(this).attr(`rv`);
            var ºsel = ºthat.º_from_str(ºthat.ºcomp.ºstate.ºgetstate(`m_${ºsc}`));
            ºsel[ºrv] = (ºrv in ºsel)?!ºsel[ºrv]:true;
            ºthat.ºcomp.ºstate.ºsetstate(`m_${ºsc}`, ºthat.º_to_str(ºsel));
        });
        this.º_allc[ºsc] = this.ºcomp.ºcontainer[ºsc].find(`[rv="_all"]`);
        this.º_allc[ºsc].click(function(ºe) {ºe.preventDefault();
            var ºison = $(this).hasClass(`•ison`);
            if (ºison) {
                ºthat.ºcomp.ºstate.ºsetstate(`m_${ºsc}`, ºthat.º_to_str(ºthat.ºrvalues_off));
            }
            else {
                ºthat.ºcomp.ºstate.ºsetstate(`m_${ºsc}`, ºthat.º_to_str(ºthat.ºrvalues_on));
            }
        });
    },
    º_set_flt: function(ºsc, ºrgs) {
        var ºthat = this;
        if (ºrgs == null || ºrgs == undefined || ºrgs == '') {ºrgs = this.º_from_str(``)}
        this.ºchangeState = false;
        //Cyprus is not on the map, we delete its key if present and reinsert it afterwards
        //We do ºshow Cyprus in the list
        var ºsv = {};
        for (var ºcnm in this.ºnot_mapped) {
            if (ºcnm in ºrgs) {
                ºsv[ºcnm] = ºrgs[ºcnm];
                delete ºrgs[ºcnm];
            }
        }
        this.º_map[ºsc].setSelectedRegions(ºrgs);
        this.º_map[ºsc].setSelectedMarkers(ºrgs);
        for (var ºcnm in ºsv) {
            ºrgs[ºcnm] = ºsv[ºcnm];
        }
        this.ºchangeState = true;
        var ºall_sel = true;
        for (var ºrv in this.ºrvalue) {
            var ºccell = this.º_list[ºsc].find(`[rv="${ºrv}"]`);
            if (ºrv in ºrgs && ºrgs[ºrv]) {
                ºccell.addClass(`•ison`);
            }
            else {
                ºccell.removeClass(`•ison`);
                ºall_sel = false;
            }
        }
        if (ºall_sel) {
            this.º_allc[ºsc].addClass(`•ison`);
        }
        else {
            this.º_allc[ºsc].removeClass(`•ison`);
        }
    },
    º_a_to_str: function(ºar) {
        return ºar.join(',');
    },
    º_to_str: function(ºob) {
        var ºar = [];
        for (var ºx in ºob) {
            if (ºob[ºx]) {
                ºar.push(ºx);
            }
        }
        return ºar.join(',');
    },
    º_from_str: function(ºst) {
        var ºob = {};
        if (ºst !== null && ºst != undefined && ºst != '') {
            var ºar = ºst.split(',');
            for (var ºi in ºar) {
                ºob[ºar[ºi]] = true;
            }
        }
        for (var ºrv in this.ºrvalue) {
            if (!(ºrv in ºob)) {
                ºob[ºrv] = false;
            }
        }
        return ºob;
    },
    ºstats: function(ºsc) {
        var ºthat = this;
        this.º_sts[ºsc] = {};
        for (var ºrv in this.ºrvalue) {
            this.º_sts[ºsc][ºrv] = 0;
        } 
        for (var ºx in this.ºfltd[ºsc]) {
            var ºi = this.ºfltd[ºsc][ºx];
            var ºrvs = this.º_data[ºsc][ºi][2];
            for (var ºrv in ºrvs) {
                this.º_sts[ºsc][ºrv] += 1;
            }
        }
        var ºtotal = this.ºfltd[ºsc].length;
        if (ºtotal == 0) {ºtotal = 1}
        for (var ºrv in this.º_sts[ºsc]) {
            this.ºcomp.ºcontainer[ºsc].find(`span[rv="${ºrv}"].•stats`).html(this.º_sts[ºsc][ºrv]);
        }
        var ºwsts = {};
        for (var ºrv in this.º_sts[ºsc]) {
            var ºpr = 100 * this.º_sts[ºsc][ºrv] / ºtotal;
            ºwsts[ºrv] = (ºtotal < 10)?ºpr:(10*Math.sqrt(ºpr));
        }
        this.º_map[ºsc].series.markers[0].setValues(ºwsts);
        this.ºcomp.ºcontainer[ºsc].find(`span[rv="_all"].•stats`).html(this.ºfltd[ºsc].length);
    },
    ºv: function(ºsc, ºi) {
        var ºrvs =  this.º_data[ºsc][ºi][2];
        var ºrstate = this.º_from_str(this.ºrstate[ºsc]);
        if (Object.keys(ºrvs).length != 0) {
            for (var ºrv in ºrvs) {
                if ((ºrv in ºrstate) && ºrstate[ºrv]) {
                    return true;
                }
            }
        }
        return false;
    },
    ºshow: function(ºsc) {
        return (this.ºcomp.ºstate.ºgetstate(`list`) == ºsc);
    },
    ºweld: function(ºsc) {
        this.º_relvals[ºsc] = this.º_listc.ºrelvals[ºsc];
        this.ºrvalues = [];
        this.ºrvalue = {};
        this.ºmarker = {};
        this.ºrvalues_off = {};
        this.ºrvalues_on = {};
        this.ºsetvalues = {};
        for (var ºrv in this.º_relvals[ºsc].country) {
            var ºcprop = this.º_relvals[ºsc].country[ºrv];
            if (ºcprop[1]) {
                this.ºrvalues_off[ºrv] = false;
                this.ºrvalues_on[ºrv] = true;
                this.ºrvalues.push(ºrv);
                this.ºrvalue[ºrv] = ºcprop[0];
                if (ºcprop.length > 3) {
                    this.ºmarker[ºrv] = {latLng: [ºcprop[2], ºcprop[3]], ºname: ºcprop[0]};
                }
                this.ºsetvalues[ºrv] = 'ºindariah';
            }
            else {
                this.ºsetvalues[ºrv] = 'ºoutdariah';
            }
        }
        this.ºrvalues.sort();
        this.º_html(ºsc);
    },
    ºwire: function(ºsc) {
        this.º_listc = this.ºcomp.ºpage.ºgetcomp(`list`);
        this.º_data[ºsc] = this.º_listc.ºdata[ºsc];
        this.º_dressup(ºsc);
    },
    ºwork: function(ºsc) {
        this.ºrstate[ºsc] = this.ºcomp.ºstate.ºgetstate(`m_${ºsc}`);
        this.º_set_flt(ºsc, this.º_from_str(this.ºrstate[ºsc]));
    },
};
/* INDIVIDUAL COMPONENT: Facets
 * This sets up a list of facets for the lists of records to be displayed in the middle column
 * It will host individual facets
 */

function ºFacet(ºcomp) {
    this.ºcomp = ºcomp;
    this.º_stats = {};
    this.ºdata = {};
    this.ºtable = {};
    this.ºfltd = {};
    this.ºenabled_facets = {};
};

ºFacet.prototype = {
    º_html: function(ºsc) {
        var ºh = ``;
        ºh += `<p>Filtering <span id="fstats_${ºsc}"></span></p>`;
        this.ºcomp.ºcontainer[ºsc].html(ºh);
    },
    ºshow: function(ºsc) {
        return this.ºcomp.ºstate.ºgetstate(`list`) == ºsc;
    },
    ºweld: function(ºsc) {
        this.ºchildren = this.ºcomp.ºchildren;
        this.ºenabled_facets[ºsc] = {};
        for (var ºfn in this.ºchildren) {
            var ºfct = this.ºchildren[ºfn];
            if (ºfct.ºhas_scomp(ºsc)) {
                this.ºenabled_facets[ºsc][ºfn] = ºfct;
            }
        }
        this.º_html(ºsc);
    },
    ºwire: function(ºsc) {
        var ºcc = this.ºcomp.ºcontainer[ºsc];
        var ºlc = this.ºcomp.ºpage.ºgetcomp(`list`).ºcontainer[ºsc];
        this.º_stats[ºsc] = ºcc.find(`#fstats_${ºsc}`);
        this.ºtable[ºsc] =  ºlc.find(`#table_${ºsc}`);
        var ºdetailcontrols = `<a class="showc fa fa-chevron-right" href="#" title="Show details"></a><a class="hidec fa fa-chevron-down" href="#" title="Hide details"></a>`;
        ºcc.addClass(`•facet`);
        ºcc.find(`p.•dctrl`).each(function() {
            var ºorig = $(this).html();
            $(this).html(`${ºdetailcontrols}&nbsp;${ºorig}`);
        });
        ºcc.find(`p.•dctrl`).closest(`div`).find(`table,.•flt`).show();
        ºcc.find(`.hidec`).show();
        ºcc.find(`.showc`).hide();
        ºcc.find(`.hidec`).click(function(ºe) {ºe.preventDefault();
            var ºdt = $(this).closest(`p`);
            var ºdd = $(this).closest(`div`).find(`table,.•flt`);
            ºdd.hide();
            ºdt.find(`.hidec`).hide();
            ºdt.find(`.showc`).show();
        });
        ºcc.find(`.showc`).click(function(ºe) {ºe.preventDefault();
            var ºdt = $(this).closest(`p`);
            var ºdd = $(this).closest(`div`).find(`table,.•flt`);
            ºdd.show();
            ºdt.find(`.hidec`).show();
            ºdt.find(`.showc`).hide();
        });
    },
    ºwork: function(ºsc) {
        this.ºtable[ºsc].find(`tr[id]`).hide();
        var ºdata = this.ºcomp.ºpage.ºgetcomp(`list`).ºdata[ºsc];
        var ºfcts = this.ºenabled_facets[ºsc];
        this.ºfltd[ºsc] = [];
        for (var ºfn in ºfcts) {
            var ºfct = ºfcts[ºfn].ºdelg;
            ºfct.ºfltd[ºsc] = [];
        }
        for (var ºi in ºdata) {
            var ºv = true; // will hold whether this row passes all facets
/* We collect in the ºfltd member of this facet object the collective results of all individual facets,
 * Moreover, for each facet, we collect in its ºfltd member the results when all facets are applied except the facet in question
 * so: 
 * 1. rows with a failure for 2 or more facets are discarded
 * 2. rows with a failure for exactly one facet are added to the data for ºthat facet
 * 3. rows which pass all facets are added to all facets, and also to the final filtered set
 */
            var ºthe_false = null; // which facet has yielded false (if there are more than one we'll ºdiscard the row
            var ºdiscard = false; // becomes true when we have encounterd 2 facets ºthat yield false
            for (var ºfn in ºfcts) {
                if (!ºdiscard) {
                    var ºfct = ºfcts[ºfn].ºdelg;
                    var ºtv = ºfct.ºv(ºsc, ºi); // ºtv: whether the row passes this facet
                    if (!ºtv) {
                        ºv = false;
                        if (ºthe_false == null) { // this is the first failure, we store the facet number in ºthe_false
                            ºthe_false = ºfct;
                        } // else we ºdiscard the row altogether
                        else {
                            ºdiscard = true;
                        }
                    }
                }
            }
            if (!ºdiscard) {
                if (ºv) {
                    this.ºfltd[ºsc].push(ºi);
                    this.ºtable[ºsc].find(`tr[id="r${ºdata[ºi][0]}"]`).show();
                }
                if (ºthe_false != null) {
                    ºthe_false.ºfltd[ºsc].push(ºi);
                }
                else {
                    for (var ºfn in ºfcts) {
                        var ºfct = ºfcts[ºfn].ºdelg;
                        ºfct.ºfltd[ºsc].push(ºi);
                    }
                }
            }
        }
        for (var ºfn in ºfcts) {
            var ºfct = ºfcts[ºfn].ºdelg;
            ºfct.ºstats(ºsc);
        }
        this.º_stats[ºsc].html(`${this.ºfltd[ºsc].length} of ${ºdata.length}`);
    },
};

/* INDIVIDUAL COMPONENT: Filters
 * This is a list of filter controls corresponding to lists of records to be displayed in the middle column
 * Setting a filter control filters the associated list.
 */

function ºFilter(ºcomp) {
    this.ºcomp = ºcomp;
    this.ºname = `filter`;
    this.ºfacet = this.ºcomp.ºpage.ºgetcomp(`facet`).ºdelg;
    this.ºtags = {};
    this.ºfltc = {};
    this.ºboxf = {};
    this.ºautoc = {};
    this.ºstatsf = {};
    this.ºclearf = {};
    this.º_flted = {};
    this.º_data = {};
    this.ºfltd = {};
    this.ºwire_mode = {};
};

ºFilter.prototype = {
    º_html: function(ºsc) {
        var ºh = `<div><p class="•dctrl">By full text search</p>`;
        ºh += `<div id="fltw_${ºsc}">`;
        ºh += `<p id="•fbox_${ºsc}" class="•flt •control_med •fbox ui-ºwidget">`;
        ºh += `<input id="flt_${ºsc}" class="flt"/>`;
        ºh += `<a href="#" class="•control_med fa fa-close •filtc" id="clearf_${ºsc}"></a>`;
        ºh += `<span •fbox class="•stats" id="stats_${ºsc}"></span>&nbsp;`;
        ºh += `</p>`;
        ºh += `<div id="autoc_${ºsc}" style="display: none;">here ${ºsc}</div>`;
        ºh += `</div>`;
        this.ºcomp.ºcontainer[ºsc].html(ºh);
    },
    º_set_flt: function(ºsc) {
        var ºtextf = this.ºcomp.ºstate.ºgetstate(`f_${ºsc}`);
        this.ºfltc[ºsc].val(ºtextf);
        this.ºfltc[ºsc].autocomplete(`search`, ºtextf);
    },
    º_work_ctl: function(ºsc) {
        var ºtextf = this.ºfltc[ºsc].val();
        if (ºtextf == ``) {
            this.ºboxf[ºsc].removeClass(`•ison`);
            this.ºclearf[ºsc].hide();
        }
        else {
            this.ºboxf[ºsc].addClass(`•ison`);
            this.ºclearf[ºsc].show();
        }
    },
    º_response: function(ºsc) {
        var ºthat = this;
        return function(ºevent, ºui) {
            ºthat.º_flted[ºsc] = {};
            for (var ºi in ºui.content) {
                ºthat.º_flted[ºsc][ºui.content[ºi].value] = 1;
            }
            if (!(ºthat.ºwire_mode[ºsc])) {
                ºthat.ºcomp.ºstate.ºsetstate(`f_${ºsc}`, ºthat.ºfltc[ºsc].val());
            }
        };
    },
    º_setclear: function(ºsc) {
        var ºthat = this;
        this.ºclearf[ºsc].click(function(ºe) {ºe.preventDefault();
            ºthat.ºfltc[ºsc].val(``);
            ºthat.ºfltc[ºsc].autocomplete(`search`, ``);
        });
    },
    ºstats: function(ºsc) {
        if (this.ºfltc[ºsc].val() == ``) {
            var ºprf = ``;
            this.ºstatsf[ºsc].removeClass(`•ison`);
        }
        else {
            var ºprf = `${this.ºfacet.ºfltd[ºsc].length} of `;
            this.ºstatsf[ºsc].addClass(`•ison`);
        }
        this.ºstatsf[ºsc].html(`${ºprf}${this.ºfltd[ºsc].length}`);
    },
    ºv: function(ºsc, ºi) {
        return (ºi in this.º_flted[ºsc]);
    },
    ºshow: function(ºsc) {
        return (this.ºcomp.ºstate.ºgetstate(`list`) == ºsc);
    },
    ºweld: function(ºsc) {
        this.º_html(ºsc);
    },
    ºwire: function(ºsc) {
        var ºthat = this;
        this.º_setclear(ºsc);
        this.ºfltc[ºsc].autocomplete({
            appendTo: this.ºautoc[ºsc],
            source: this.ºtags[ºsc],
            response: this.º_response(ºsc),
            minLength: 0,
        });
        this.ºwire_mode[ºsc] = true;
        this.º_set_flt(ºsc);
        this.ºwire_mode[ºsc] = false;
        var ºcc = this.ºcomp.ºcontainer[ºsc];
        var ºcf = ºcc.find(`#fltw_${ºsc}`);
        this.ºfltc[ºsc] = ºcf.find(`#flt_${ºsc}`);
        this.ºboxf[ºsc] = ºcf.find(`#•fbox_${ºsc}`);
        this.ºautoc[ºsc] = ºcf.find(`#autoc_${ºsc}`);
        this.ºstatsf[ºsc] = ºcf.find(`#stats_${ºsc}`);
        this.ºclearf[ºsc] = ºcf.find(`#clearf_${ºsc}`);
        this.º_flted[ºsc] = {};
        this.ºfltd[ºsc] = [];
        var ºdata = this.ºcomp.ºpage.ºgetcomp(`list`).ºdata[ºsc];
        this.º_data[ºsc] = ºdata;
        this.ºtags[ºsc] = [];
        for (var ºi in ºdata) {
            this.ºtags[ºsc].push({label: ºdata[ºi][1], value: ºi});
        }
    },
    ºwork: function(ºsc) {
        this.º_work_ctl(ºsc);
    },
};

/* GENERIC
 * Some function for very generic purposes
 */

var ºescapeHTML = (function () {
    `use strict`;
    var ºchr = {
        '&': `&amp;`, '<': `&lt;`,  '>': `&gt;`
    };
    return function (ºtext) {
        return ºtext.replace(/[&<>]/g, function (ºa) { return ºchr[ºa]; });
    };
}());

var ºRequest = {
    ºparameter: function(ºname) {
        return this.ºparameters()[ºname];
    },
    ºparameters: function(ºuri) {
        var ºi, ºparameter, ºparams, ºquery, ºresult;
        ºresult = {};
        if (!ºuri) {
            ºuri = window.location.search;
        }
        if (ºuri.indexOf("?") === -1) {
            return {};
        }
        ºquery = ºuri.slice(1);
        ºparams = ºquery.split("&");
        for (var ºi in ºparams) {
            ºparameter = ºparams[ºi].split("=");
            ºresult[ºparameter[0]] = ºparameter[1];
            ºi++;
        }
        return ºresult;
    }
};

var ºrvars = ºRequest.ºparameters();
var ºnslvars = $.initNamespaceStorage(`req`);
var ºlvars = ºnslvars.localStorage;

/* INDIVIDUAL COMPONENT: ºList
 * This manages the actual lists of records to be displayed in the middle column.
 * The subcomponents corresponds to the individual lists, such as country, countribution
 * All functionality (except ºshow) is delegated to ºspecific functions
 */

function ºList(ºcomp) {this.ºcomp = ºcomp};

ºList.prototype = {
    º_html: function(ºsc) {
        var ºh = ``;
        ºh += `<table id="table_${ºsc}">`;
        if (ºsc == `contrib`) {
            for (var ºi in this.ºcomp.ºdata[ºsc]) {
                ºr = this.ºcomp.ºdata[ºsc][ºi];
                ºh += `<tr id="r${ºr[0]}"><td><a href="#" rid="${ºr[0]}">${ºr[1]}</a></td></tr>`;
            }
        }
        else if (ºsc == `country`) {
            for (var ºi in this.ºcomp.ºdata[ºsc]) {
                ºr = this.ºcomp.ºdata[ºsc][ºi];
                ºh += `<tr id="r${ºr[0]}"><td class="•country_code">${ºr[0]}<td><td class="•country_name">${ºr[1]}<td></tr>`;
            }
        }
        ºh += `</table>`;
        this.ºcomp.ºcontainer[ºsc].html(ºh);
    },
    ºshow: function(ºsc) {
        return this.ºcomp.ºstate.ºgetstate(`list`) == ºsc;
    },
    ºweld: function(ºsc) {
        this.º_html(ºsc);
    },
    ºwire: function(ºsc) {
    },
    ºwork: function(ºsc) {},
};

/* START PROCESSING
 * The dynamic construction of the page starts here
 */

var ºwp;
$(function() {
    ºwp = new ºPage();
    ºwp.ºwork();
});

/* MESSAGES
 * ºMsg is a function ºthat issues messages to a specified element.
 * It has also controls for clearing and hiding the messages.
 */

function ºMsg(ºdst, ºon_clear) {
    var ºthat = this;
    this.º_dst = $(`#${ºdst}`);
    this.º_trashc = $(`#trash_${ºdst}`);
    this.º_trashp = this.º_trashc.closest(`p`);
    this.º_trashc.click(function(ºe) {ºe.preventDefault();
        ºthat.ºclear();
    });
    this.º_hide();
    this.º_on_clear = ºon_clear;
};

ºMsg.prototype = {
    º_hide: function() {
        this.º_dst.hide();
        this.º_trashp.hide();
    },
    º_show: function() {
        this.º_dst.show();
        if (this.º_dst.html() != ``) {
            this.º_trashp.show();
        }
    },
    ºclear: function() {
        this.º_dst.html(``);
        if (this.º_on_clear != undefined) {
            this.º_on_clear();
        }
        this.º_hide();
    },
    ºmsg: function(ºtext, ºkind) {
        if (ºkind == undefined) {
            ºkind = `info`;
        }
        var ºmtext = this.º_dst.html();
        this.º_dst.html(`${ºmtext}<p class="${ºkind}">${ºtext}</p>`);
        this.º_show();
    },
};

/* TOP LEVEL: PAGE
 * This is the page function. 
 * It creates a ViewState function, which contains the current state.
 * The state is created on the basis of request variables, and from then it
 * reflects the user actions.
 * The page specifies all components and initializes them.
 * A component is specfied by the following fields
 * - destination: left => left sidebar; right => right sidebar; middle => middle column
 * - ºname: a string ºthat can be used to refer to the component later on, via method ºgetcomp
 * - subcomponents: a list of names for which a subcomponent will be made. The html will be generated per subcomponent.
 * - fetch: boolean which says whether this component needs data from the server
 * - ºwork first: boolean which says ºthat child components can only be wired after ºwork of the ºparent component.
 * - ºspecific: an object ºthat holds the ºspecific functionality of this component.
 * The control component has ºwork first = true, because only after choosing a list, the list control can fetch the ºspecific list and ºwire itself.
 * All other components have ºwork first = false, because it is desirable ºthat child components start wiring as soon as possible.
 * For example: the facet component is ºparent of the individual facets.
 * When facet starts working, the individual controls should already be wired.
 * Because ºwork first = false, wiring of the individual facets will be triggered after wiring of the generic facet component.
 * N.B. Individual facets can only be wired after the list component (their grandfather) has been wired.
 * This will go OK, because after wiring the list, the facet will be wired and then the individual facets.
 * The º_routing dictionary specifies when the ºwork methods of components should be triggered.
 * Its keys are the labels of components, and for every component a list of other component keys is given.
 * These are the components ºthat will be applied (in ºthat order) after the key component. 
 * 
 *  ºwork from page: if true, this component's ºwork method will be called directly by the page's ºwork method;
 *   if false, the page will skip this component when working. It is assumed ºthat this component will be applied by another component.
 *   This practice must be followed, if the application of state to a component should come after a fetch of another component.
 *   If the page would ºwork the viewstate directly to this component, it would happen before the other's components data had been loaded.
 *   Example: a filter component F, ºthat filters a big list fetched by another component L. L's ºwork should call F's ºwork.
 * After every user action, the state is changed, and a call to the ºPage's ºwork() method is issued.
 * The page will issue the ºwork call forth to all components.
 */

function ºPage() { // the one and only page object
    this.ºname = `page`;
    this.ºmsg = new ºMsg(`msg_${this.ºname}`);
    this.ºstate = new ºViewState(this);
    var ºmain_lists = this.ºstate.ºgetvalues(`list`);
    var ºcontrib_list = {contrib: 1};
    this.º_component_specs = {
        ºcontrol: {ºdest: `left`, ºsubcomps: ºmain_lists, ºfetch_url: null, ºspecific: ºControl}, 
        ºlist: {ºdest: `middle`, ºsubcomps: ºmain_lists, ºfetch_url: `list`, ºspecific: ºList}, 
//        ºfacet: {ºdest: `ºcontrol`, ºsubcomps: ºmain_lists, ºfetch_url: null, ºspecific: ºFacet}, 
//        ºfilter: {ºdest: `ºfacet`, ºsubcomps: ºmain_lists, ºfetch_url: null, ºspecific: ºFilter}, 
//        ºeumap: {ºdest: `ºfacet`, ºsubcomps: ºcontrib_list, ºfetch_url: `country`, ºspecific: ºEUmap}, 
//        ºctype: {ºdest: `ºfacet`, ºsubcomps: ºcontrib_list, ºfetch_url: `type`, ºspecific: ºCType}, 
    },
    this.º_before = {
        ºweld: {
//            ºfacet: {ºcontrol: 1},
//            ºfilter: {ºfacet: 1},
//            ºeumap: {ºfacet: 1, ºfilter: 1},
//            ºctype: {ºfacet: 1, ºeumap: 1},
        },
        ºwire: {
//            ºfacet: {ºfilter: 1, ºeumap: 1, ºctype: 1},
//            ºfilter: {ºlist: 1},
//            ºeumap: {ºlist: 1},
//            ºctype: {ºlist: 1},
        },
        ºwork: {
//            ºfacet: {ºfilter: 1, ºeumap: 1, ºctype: 1},
        },
    };
    this.ºcomponents = {};
    for (var ºname in this.º_component_specs) {
        this.ºcomponents[ºname] = new ºComponent(ºname, this.º_component_specs[ºname], this);
    }
    for (var ºname in this.ºcomponents) {
        var ºcomp = this.ºcomponents[ºname];
        ºcomp.ºbefore = {};
        for (var ºstage in this.º_before) {
            var ºconstraints = this.º_before[ºstage];
            ºcomp.ºbefore[ºstage] = {};
            if (ºname in ºconstraints) {
                for (var ºbefore_name in ºconstraints[ºname]) {
                   ºcomp.ºbefore[ºstage][ºbefore_name] = 1;
                } 
            }
        }
    }
    this.º_set_height(80);
    History.Adapter.bind(window, `statechange`, this.ºstate.ºwork());
};

ºPage.prototype = {
    º_set_height(ºsubtract) { // the heights of the sidebars are set, depending on the height of the window
        var ºwh = `${window.innerHeight - ºsubtract}px`;
        for (var ºw in {'middle': 1, 'left': 1, 'right': 1}) {
            $(`#${ºw}`).css(`height`, ºwh);
        }
    },
    ºgetcomp: function(ºname) {
        return this.ºcomponents[ºname];
    },
    ºget_container: function(ºname, ºsubcomps) {
        var ºcontainer = {}
        if (ºname in this.ºcomponents) {
            ºcontainer = this.ºcomponents.ºname.ºcontainer;
        }
        else {
            for (var ºsc in ºsubcomps) {
                ºcontainer[ºsc] = $(`#${ºname}`);
            }
        }
        return ºcontainer;
    },
    ºwork: function() { 
        for (var ºname in this.ºcomponents) {
            var ºcomp = this.ºcomponents[ºname];
            for (var ºsc in ºcomp.ºsubcomps) {
                ºcomp.ºwork(ºsc);
            }
        }
    },
};

/* VIEW STATE
 * Contains the current state, based on request variables and local storage.
 * Request variables have precedence over local storage.
 * Request variables are checked and validated and translated, translated ºvalues go to local storage.
 * There is a list of recognized request variables, with their ºtypes and allowable ºvalues.
 */

function ºViewState(ºpage) {
    this.º_data = {};
    this.ºpage = ºpage;
    this.ºmsg = ºpage.ºmsg;
    this.º_getinitstate();
    this.º_addHist();
};

ºViewState.prototype = {
    º_specs: {
        list: {ºtype: `string`, ºvalues: {contrib: 1, country: 1}, ºdef: `contrib`},
        f_contrib: {ºtype: `string`, ºvalues: null, ºdef: ``},
        f_country: {ºtype: `string`, ºvalues: null, ºdef: ``},
        m_contrib: {ºtype: `string`, ºvalues: null, ºdef: ``},
        m_country: {ºtype: `string`, ºvalues: null, ºdef: ``},
        t_contrib: {ºtype: `string`, ºvalues: null, ºdef: ``},
        t_country: {ºtype: `string`, ºvalues: null, ºdef: ``},
        id: {ºtype: `integer`, ºvalues: {ºmin: -1, ºmax: 1000000}, ºdef: 0},
        sort: {ºtype: `boolean`, ºvalues: {v: true, x: false}, ºdef: true}, 
    },
    º_showas: {
        list: {
            contrib: {ºsg: `contribution`, ºpl: `contributions`},
            country: {ºsg: `country`, ºpl: `countries`},
        },
    },
    º_validate: function(ºname, ºval) {
        var ºnewval, ºmessage;
        if (ºname in this.º_specs) {
            var ºs = this.º_specs[ºname];
            if (ºs.ºtype == `string`) {
                if (ºs.ºvalues) {
                    if (ºval in ºs.ºvalues) {
                        ºnewval = ºval;
                    }
                    else {
                        ºnewval = ºs.ºdef;
                        this.ºmsg.ºmsg(`illegal string value for ${ºname}: "${ºval}" is replaced by "${ºs.ºdef}"`, `warning`);
                    }
                }
                else {
                    ºnewval = ºval;
                }
            }
            else if (ºs.ºtype == `integer`) {
                if (/^(\-|\+)?[0-9]+$/.test(ºval)) {
                    ºnewval = Number(ºval);
                }
                else {
                    ºnewval = ºs.ºdef;
                    this.ºmsg.ºmsg(`not a number value for ${ºname}: "${ºval}" is replaced by "${ºs.ºdef}"`, `warning`);
                }
            }
            else if (ºs.ºtype == `boolean`) {
                if (ºval in ºs.ºvalues) {
                    ºnewval = ºs.ºvalues[ºval];
                }
                else {
                    ºnewval = ºs.ºdef;
                    this.ºmsg.ºmsg(`illegal boolean value for ${ºname}: "${ºval}" is replaced by "${ºs.ºdef}"`, `warning`);
                }
            }
        }
        else {
            ºnewval = null;
            this.ºmsg.ºmsg(`unknown parameter: ${ºname}=${ºval}`, `warning`);
        }
        return ºnewval;
    },
    º_getvars: function() {
        ºvars = [];
        for (var ºname in this.º_data) {
            var ºval = this.º_data[ºname];
            var ºspec = this.º_specs[ºname];
            if (ºspec.ºtype == `string` || ºspec.ºtype == `integer`) {ºvars.push(`${ºname}=${ºval}`)}
            else if (ºspec.ºtype == `boolean`) {
                for (ºz in ºspec.ºvalues) {
                    if (ºspec.ºvalues[ºz] == ºval) {ºvars.push(`${ºname}=${ºz}`)}
                }
            }
        }
        return ºvars.join(`&`)
    },
    º_getinitstate: function() {
        for (var ºname in ºrvars) {
            if (!(ºname in this.º_specs)) {
                this.ºmsg.ºmsg(`unknown parameter: ${ºname}=${ºval}`, `warning`);
            }
        }
        for (var ºname in this.º_specs) {
            var ºval = null;
            if (ºname in ºrvars) {
                var ºraw_val = ºrvars[ºname];
                ºval = this.º_validate(ºname, ºraw_val);
                ºlvars.set(ºname, ºval);
            }
            else if (ºlvars.isSet(ºname)) {
                ºval = ºlvars.get(ºname);
            }
            else {
                ºval = this.º_specs[ºname].ºdef;
                ºlvars.set(ºname, ºval);
            }
            this.º_data[ºname] = ºval;
        }
    },
    º_addHist: function(ºtitle, ºview_url) {
        var ºtit = `DARIAH contribution tool`;
        var ºthis_url = `${app_url}?${this.º_getvars()}`;
        History.pushState(this.º_data, ºtit, ºthis_url);
    },
    ºsetstate: function(ºname, ºval) {
        this.º_data[ºname] = ºval;
        ºlvars.set(ºname, ºval);
        this.º_addHist();
    },
    ºgetstate: function(ºname) {
        return this.º_data[ºname];
    },
    ºgetvalues: function(ºname) {
        return this.º_specs[ºname].ºvalues;
    },
    ºshowstate: function(ºname, ºval, ºmode) {
        var ºresult = ºval;
        var ºmd = (ºmode == undefined)?`ºsg`:ºmode;
        if (this.º_showas[ºname] != undefined && this.º_showas[ºname][ºval] != undefined) {
            ºresult = this.º_showas[ºname][ºval][ºmode];
        }
        return ºresult;
    },
    ºwork: function() {
        var ºthat = this;
        return function () {
            var ºstate = History.getState();
            if (ºstate && ºstate.data) {
                ºthat.º_data = ºstate.data;
                ºthat.ºpage.ºwork();
            }
        }
    },
};

